#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include <signal.h>

#define ITERATIONS 100

pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condB = PTHREAD_COND_INITIALIZER;
pthread_cond_t condA = PTHREAD_COND_INITIALIZER;

int global_value = 500;
void* workerLower(void *arg);
void* workerAbove(void* arg);

int main(int argc, char* argv[])
{
        pthread_t threads[2];
        pthread_create(&threads[0], NULL, &workerLower, NULL);
        pthread_create(&threads[1], NULL, &workerAbove, NULL);

        srand(time(NULL));

        int i;
        for (i=0; i<ITERATIONS; i++)
        {
                int num = rand()%40-20;
                printf("[main] %d\n", global_value);
                pthread_mutex_lock(&mtx);
                global_value += num;
                if (global_value >= 700) pthread_cond_signal(&condA);
                else if (global_value <= 300) pthread_cond_signal(&condB);
                pthread_mutex_unlock(&mtx);
        }
        pthread_cancel(threads[0]);
        pthread_cancel(threads[1]);
        return 0;
}

void* workerLower(void *arg)
{
        while(1)
        {
                pthread_mutex_lock(&mtx);
                pthread_cond_wait(&condB, &mtx);
                if (global_value <= 300) printf("[  lower  ] -> %d\n", global_value);
                pthread_mutex_unlock(&mtx);
        }
        return NULL;
}

void *workerAbove(void *arg)
{
        while(1)
        {
                pthread_mutex_lock(&mtx);
                pthread_cond_wait(&condA, &mtx);
                if (global_value >= 700) printf("[  above  ] -> %d\n", global_value);
                pthread_mutex_unlock(&mtx);
        }
        return NULL;
}