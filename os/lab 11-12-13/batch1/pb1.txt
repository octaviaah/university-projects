#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int a[1000];
int counter = 0;
pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;

void* count(void* arg)
{
        char *nrc = (char*)arg;
        int nr = atoi(nrc);
        pthread_mutex_lock(&mtx);
        if (nr %2==0)
        {
                int i;
                for (i=0; i<1000; i++)
                        if (a[i] == 0)
                        {
                                a[i] = nr;
                                break;
                        }
        }
        else counter++;
        pthread_mutex_unlock(&mtx);
        return NULL;
}

int main(int argc, char* argv[])
{
        pthread_t *tid;
        tid = (pthread_t*)malloc(sizeof(pthread_t)*(argc+1));
        int i;
        for (i=1; argv[i]; i++)
                if (pthread_create(&tid[i], NULL, count, (void*)argv[i]) >0)
                {
                        perror("failed to create thread");
                        exit(1);
                }
        for (i=1; argv[i]; i++) pthread_join(tid[i], NULL);
        pthread_mutex_destroy(&mtx);
        printf("the counter is %d\n", counter);
        printf("the array is:\n");
        for (i=0; i<1000; i++)
                if (a[i] != 0)
                        printf("%d ", a[i]);
        printf("\n");
        //for (i=0; argv[i]; i++) free(tid[i]);
        free(tid);
        return 0;
}