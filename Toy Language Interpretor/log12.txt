ID: 
1
Execution stack: 
(int v; (v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)))) 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) int v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) int v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) v = 20 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) v = 20 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) (v = 0; while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) (v = 0; while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = 0 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = 0 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 1

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 1

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 
Symbol table: 
v -> 0

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 
Symbol table: 
v -> 0

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 

Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 2

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 2

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 
Symbol table: 
v -> 1

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 
Symbol table: 
v -> 1

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 

Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 3

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 3

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) 
Symbol table: 
v -> 3

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) 
Symbol table: 
v -> 3

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 

Symbol table: 
v -> 3

Output: 
0 1 2 30 

File table: 

Heap: 

 
ID: 
4
Execution stack: 

Symbol table: 
v -> 3

Output: 
0 1 2 30 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int v; (v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)))) 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) int v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) int v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(v = 20; (for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10))) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) v = 20 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) v = 20 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)); print(v * 10)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) for(v=0; v<3; v=v + 1) 
fork((print(v); v = v + 1)) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) (v = 0; while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) (v = 0; while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end) 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = 0 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = 0 
Symbol table: 
v -> 20

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 1

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 1

Output: 


File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 
Symbol table: 
v -> 0

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 
v = v + 1 
Symbol table: 
v -> 0

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
2
Execution stack: 

Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 2

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 2

Output: 
0 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 1

Output: 
0 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 
Symbol table: 
v -> 1

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end (fork((print(v); v = v + 1)); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 
v = v + 1 
Symbol table: 
v -> 1

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
3
Execution stack: 

Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 fork((print(v); v = v + 1)) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
(print(v); v = v + 1) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 3

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) while(v < 3) do(fork((print(v); v = v + 1)); v = v + 1) end 
Symbol table: 
v -> 3

Output: 
0 1 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 print(v) 
Symbol table: 
v -> 2

Output: 
0 1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) 
Symbol table: 
v -> 3

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(v * 10) 
Symbol table: 
v -> 3

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
4
Execution stack: 
v = v + 1 
Symbol table: 
v -> 2

Output: 
0 1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 

Symbol table: 
v -> 3

Output: 
0 1 2 30 

File table: 

Heap: 

 
ID: 
4
Execution stack: 

Symbol table: 
v -> 3

Output: 
0 1 2 30 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int a; (a = 1; (int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))))))) 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(a = 1; (int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))))) int a 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(a = 1; (int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))))) int a 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(a = 1; (int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))))) 
Symbol table: 
a -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(a = 1; (int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))))) 
Symbol table: 
a -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))))) a = 1 
Symbol table: 
a -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))))) a = 1 
Symbol table: 
a -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))))) 
Symbol table: 
a -> 1

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int b; (b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))))) 
Symbol table: 
a -> 1

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))) int b 
Symbol table: 
a -> 1

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))) int b 
Symbol table: 
a -> 1

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))) 
Symbol table: 
a -> 1
b -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(b = 2; (int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))))) 
Symbol table: 
a -> 1
b -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))) b = 2 
Symbol table: 
a -> 1
b -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))) b = 2 
Symbol table: 
a -> 1
b -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))) 
Symbol table: 
a -> 1
b -> 2

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(int c; (c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)))) 
Symbol table: 
a -> 1
b -> 2

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))) int c 
Symbol table: 
a -> 1
b -> 2

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))) int c 
Symbol table: 
a -> 1
b -> 2

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))) 
Symbol table: 
a -> 1
b -> 2
c -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(c = 5; (switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300))) 
Symbol table: 
a -> 1
b -> 2
c -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)) c = 5 
Symbol table: 
a -> 1
b -> 2
c -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)) c = 5 
Symbol table: 
a -> 1
b -> 2
c -> 0

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)); print(300)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) switch(a * 10)
(case(b * c ) (print(a); print(b)))
(case(10 ) (print(100); print(200))
(default print(300)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) (print(a); print(b)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) (print(a); print(b)) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) print(b) print(a) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) print(b) print(a) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) print(b) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 
1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) print(b) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 
1 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 
1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 
print(300) 
Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 
1 2 

File table: 

Heap: 

 
ID: 
1
Execution stack: 

Symbol table: 
a -> 1
b -> 2
c -> 5

Output: 
1 2 300 

File table: 

Heap: 

 
