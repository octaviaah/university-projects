ID: 
1
Execution stack: 
(ref( int ) v; (newStmt(v, 20); (ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5)))))) 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(newStmt(v, 20); (ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5))))) ref( int ) v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(newStmt(v, 20); (ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5))))) ref( int ) v 
Symbol table: 

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(newStmt(v, 20); (ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5))))) 
Symbol table: 
v -> (0,int)

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(newStmt(v, 20); (ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5))))) 
Symbol table: 
v -> (0,int)

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5)))) newStmt(v, 20) 
Symbol table: 
v -> (0,int)

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5)))) newStmt(v, 20) 
Symbol table: 
v -> (0,int)

Output: 


File table: 

Heap: 

 
ID: 
1
Execution stack: 
(ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5)))) 
Symbol table: 
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(ref( ref( int ) ) a; (newStmt(a, v); (print(v); print(a + 5)))) 
Symbol table: 
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(newStmt(a, v); (print(v); print(a + 5))) ref( ref( int ) ) a 
Symbol table: 
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(newStmt(a, v); (print(v); print(a + 5))) ref( ref( int ) ) a 
Symbol table: 
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(newStmt(a, v); (print(v); print(a + 5))) 
Symbol table: 
a -> (0,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(newStmt(a, v); (print(v); print(a + 5))) 
Symbol table: 
a -> (0,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(print(v); print(a + 5)) newStmt(a, v) 
Symbol table: 
a -> (0,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(print(v); print(a + 5)) newStmt(a, v) 
Symbol table: 
a -> (0,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
 
ID: 
1
Execution stack: 
(print(v); print(a + 5)) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 
(print(v); print(a + 5)) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 
print(a + 5) print(v) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 
print(a + 5) print(v) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 


File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 
print(a + 5) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 
20 

File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 
print(a + 5) 
Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 
20 

File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
ID: 
1
Execution stack: 

Symbol table: 
a -> (2,ref( int ))
v -> (1,int)

Output: 
20 25 

File table: 

Heap: 
1 -> 20
2 -> (1,int)
 
