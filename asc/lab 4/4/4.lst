     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 19                          a db 25
    14 00000001 00                          n db 0
    15 00000002 00                          b db 0
    16 00000003 00000000                    c dd 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;Given the byte A, obtain the integer number n represented on the bits 2-4 of A. Then obtain the byte B by rotating A n positions to the right. Compute the doubleword C as follows:
    22                                      ;the bits 8-15 of C have the value 0
    23                                      ;the bits 16-23 of C are the same as the bits of B
    24                                      ;the bits 24-31 of C are the same as the bits of A
    25                                      ;the bits 0-7 of C have the value 1
    26                                      
    27 00000000 B800000000                      mov eax, 0
    28 00000005 A0[00000000]                    mov al, [a]
    29 0000000A 83E01C                          and eax, 0001_1100b
    30                                          
    31 0000000D B102                            mov cl, 2
    32 0000000F D3C8                            ror eax, cl
    33                                          
    34 00000011 BA00000000                      mov edx, 0
    35 00000016 09C2                            or edx, eax
    36 00000018 8815[01000000]                  mov [n], dl
    37                                          
    38 0000001E B800000000                      mov eax, 0
    39 00000023 A0[00000000]                    mov al, [a]
    40                                          
    41 00000028 8A0D[01000000]                  mov cl, [n]
    42 0000002E D3C8                            ror eax, cl
    43 00000030 A2[02000000]                    mov [b], al
    44                                          
    45 00000035 BA00000000                      mov edx, 0
    46 0000003A 81CAFF000000                    or edx, 0000_0000_1111_1111b
    47                                          
    48 00000040 B800000000                      mov eax, 0
    49 00000045 A0[00000000]                    mov al, [a]
    50 0000004A B118                            mov cl, 24
    51 0000004C D3C0                            rol eax, cl
    52                                          
    53 0000004E 09C2                            or edx, eax
    54                                          
    55 00000050 B800000000                      mov eax, 0
    56 00000055 A0[02000000]                    mov al, [b]
    57 0000005A B110                            mov cl, 16
    58 0000005C D3C0                            rol eax, cl
    59                                          
    60 0000005E 09C2                            or edx, eax
    61                                          
    62 00000060 8915[03000000]                  mov [c], edx
    63                                      
    64                                          ; exit(0)
    65 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
