     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 5A02                        a dw 25ah
    14 00000002 0122                        b dw 2201h
    15 00000004 00000000                    c dd 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                      ;Given the words A and B, compute the doubleword C as follows:
    21                                      ;the bits 0-2 of C are the same as the bits 12-14 of A
    22                                      ;the bits 3-8 of C are the same as the bits 0-5 of B
    23                                      ;the bits 9-15 of C are the same as the bits 3-9 of A
    24                                      ;the bits 16-31 of C are the same as the bits of A
    25                                      
    26 00000000 B800000000                      mov eax, 0
    27 00000005 66A1[00000000]                  mov ax, [a]
    28 0000000B 2500700000                      and eax, 0111_0000_0000_0000b
    29                                          
    30 00000010 B10C                            mov cl, 12
    31 00000012 D3C8                            ror eax, cl
    32                                          
    33 00000014 BA00000000                      mov edx, 0
    34 00000019 09C2                            or edx, eax
    35                                          
    36 0000001B B800000000                      mov eax, 0
    37 00000020 66A1[02000000]                  mov ax, [b]
    38 00000026 83E03F                          and eax, 0000_0000_0011_1111b
    39                                          
    40 00000029 B103                            mov cl, 3
    41 0000002B D3C0                            rol eax, cl
    42 0000002D 09C2                            or edx, eax
    43                                          
    44 0000002F B800000000                      mov eax, 0
    45 00000034 66A1[00000000]                  mov ax, [a]
    46 0000003A 25F8030000                      and eax, 0000_0011_1111_1000b
    47                                          
    48 0000003F B106                            mov cl, 6
    49 00000041 D3C0                            rol eax, cl
    50 00000043 09C2                            or edx, eax
    51                                          
    52 00000045 B800000000                      mov eax, 0
    53 0000004A 66A1[00000000]                  mov ax, [a]
    54 00000050 B110                            mov cl, 16
    55 00000052 D3C0                            rol eax, cl
    56 00000054 09C2                            or edx, eax
    57                                          
    58 00000056 8915[04000000]                  mov [c], edx
    59                                          ; exit(0)
    60 0000005C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000005E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
