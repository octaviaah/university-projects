     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 78A63412896745237D-         string dd 1234A678h , 123456789h , 1AC3B47Dh, 0FEDC9876h
    15          ******************       warning: dword data exceeds bounds [-w+number-overflow]
    15 00000009 B4C31A7698DCFE     
    16                                      len equ $-string
    17 00000010 00000000                    sum dd 0
    18 00000014 7700                        access_mode db "w", 0
    19 00000016 66696C652E74787400          file_name db "file.txt", 0
    20 0000001F FFFFFFFF                    file_descriptor dd -1
    21 00000023 00000000                    max dd 0
    22 00000027 00000000                    max_index dd 0
    23 0000002B 00000000                    byte_index dd 0
    24 0000002F <res 00000014>              byte_string resb 20
    25 00000043 03000000                    index dd 3
    26 00000047 04000000                    mult4 dd 4
    27 0000004B 256400                      dformat db "%d", 0
    28 0000004E 0D                          newline db 13
    29                                      
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ;Se da un sir de dublucuvinte (in segmentul de date). 
    35                                          ;Se cere formarea si scrierea in fisier pozitiile octetilor de valoare maxima din fiecare dublucuvant. (evident considerandule fare semn).
    36                                          ;Sa se afiseze si suma acestor octeti (consideranduse cu semn).
    37                                          ;Exemplu: dd 1234A678h , 123456789h , 1AC3B47Dh, FEDC9876h .
    38                                          ;Sirul format din pozitiile octetilor este: "3421".
    39 00000000 68[14000000]                    push dword access_mode
    40 00000005 68[16000000]                    push dword file_name
    41 0000000A FF15[00000000]                  call [fopen]
    42 00000010 83C408                          add esp, 8
    43                                          
    44 00000013 83F800                          cmp eax, 0
    45 00000016 0F8406010000                    je fin
    46                                          
    47 0000001C A3[1F000000]                    mov [file_descriptor], eax
    48 00000021 BE00000000                      mov esi, 0
    49                                          
    50                                          read_string:
    51 00000026 31C0                                xor eax, eax
    52 00000028 8A86[00000000]                      mov al, [string+esi]
    53 0000002E 3B05[23000000]                      cmp eax, dword [max]
    54 00000034 7E18                                jle cont
    55 00000036 A3[23000000]                        mov dword [max], eax
    56 0000003B 8B1D[43000000]                      mov ebx, [index]
    57 00000041 891D[27000000]                      mov [max_index], ebx
    58 00000047 8305[27000000]01                    add dword [max_index], 1
    59                                              cont:
    60 0000004E 46                                      inc esi
    61 0000004F 832D[43000000]01                        sub dword [index], 1
    62 00000056 3B35[47000000]                          cmp esi, dword [mult4]
    63 0000005C 75C8                                    jne read_string
    64 0000005E 7400                                    je redo
    65                                                  
    66                                             redo:
    67 00000060 8305[47000000]04                        add dword [mult4], 4
    68 00000067 8B3D[2B000000]                          mov edi, [byte_index]
    69 0000006D 66A1[10000000]                          mov ax, word [sum]
    70 00000073 6699                                    cwd
    71 00000075 6689C3                                  mov bx, ax
    72 00000078 6689D1                                  mov cx, dx
    73                                                  
    74 0000007B 66A1[23000000]                          mov ax, word [max]
    75 00000081 6699                                    cwd
    76 00000083 6601C3                                  add bx, ax
    77 00000086 6611D1                                  adc cx, dx
    78                                                  
    79 00000089 66A3[10000000]                          mov word [sum], ax
    80 0000008F 668915[12000000]                        mov word [sum+2], dx
    81                                                  
    82 00000096 A0[27000000]                            mov al, byte [max_index]
    83 0000009B 0430                                    add al, 30h
    84 0000009D 8887[2F000000]                          mov [byte_string+edi], al
    85 000000A3 8305[2B000000]01                        add dword [byte_index], 1
    86                                                  
    87 000000AA C705[23000000]0000-                     mov dword [max], 0
    87 000000B2 0000               
    88 000000B4 C705[27000000]0000-                     mov dword [max_index], 0
    88 000000BC 0000               
    89 000000BE C705[43000000]0300-                     mov dword [index], 3
    89 000000C6 0000               
    90                                                  
    91 000000C8 83FE10                                  cmp esi, len
    92 000000CB 0F8555FFFFFF                            jne read_string
    93                                               
    94                                             write_text:
    95 000000D1 68[2F000000]                            push dword byte_string
    96 000000D6 FF35[1F000000]                          push dword [file_descriptor]
    97 000000DC FF15[00000000]                          call [fprintf]
    98 000000E2 83C408                                  add esp, 8
    99                                                  
   100 000000E5 68[4E000000]                            push dword newline
   101 000000EA FF35[1F000000]                          push dword [file_descriptor]
   102 000000F0 FF15[00000000]                          call [fprintf]
   103 000000F6 83C408                                  add esp, 8
   104                                                  
   105 000000F9 FF35[10000000]                          push dword [sum]
   106 000000FF 68[4B000000]                            push dword dformat
   107 00000104 FF35[1F000000]                          push dword [file_descriptor]
   108 0000010A FF15[00000000]                          call [fprintf]
   109 00000110 83C40C                                  add esp, 12
   110                                                  
   111 00000113 FF35[1F000000]                          push dword [file_descriptor]
   112 00000119 FF15[00000000]                          call [fclose]
   113 0000011F 83C404                                  add esp, 4
   114                                                  
   115                                          fin:
   116                                          ; exit(0)
   117 00000122 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   118 00000124 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
