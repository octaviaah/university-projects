     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  ; our data is declared here (the variables needed by our program)
    11                                  segment data use32 class=data
    12 00000000 78563412CDAB341233-         sir dd 12345678h,1234abcdh,0FF00FE33h
    12 00000009 FE00FF             
    13                                      len equ $-sir
    14 0000000C 00000000                    ccx dd 0
    15 00000010 <res 00000010>              nmb resb 16
    16 00000020 00000000                    index dd 0
    17 00000024 256400                      dformat db "%d", 0
    18 00000027 2000                        space db ' ', 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;Se da un sir de dublucuvinte. Se cere formarea si afisarea unui sir de biti cu urmatoarele reguli:
    24                                          ;Se ia cel mai semnificativ octet din cel mai putin semnificativ cuvant, iar daca este strict negativ se pune in sir.
    25                                          ;Exemplu: sir dd 12345678h,1234abcdh,FF00FE33h.
    26                                          ;Pe ecan se afiseaza: 1010 1011 1111 1110 (numerele gasite fiind AB,FE
    27 00000000 BE01000000                      mov esi, 1
    28                                          read_string:
    29 00000005 31C0                                xor eax, eax
    30 00000007 8A86[00000000]                      mov al, [sir+esi]
    31 0000000D 89C3                                mov ebx, eax
    32                                              
    33 0000000F C605[0C000000]08                    mov byte [ccx], 8
    34 00000016 B908000000                          mov ecx, 8
    35 0000001B BF00000000                          mov edi, 0
    36                                              all_bits:
    37 00000020 8B0D[0C000000]                          mov ecx, [ccx]
    38 00000026 D0C3                                    rol bl, 1
    39 00000028 720D                                    jc store_bit
    40                                                  cont:
    41 0000002A 7316                                        jnc store_no_bit
    42                                                      cont2:
    43 0000002C 49                                              dec ecx
    44 0000002D 890D[0C000000]                                  mov dword [ccx], ecx
    45 00000033 75EB                                            jnz all_bits
    46 00000035 7416                                            jz print_bin
    47                                          store_bit:
    48 00000037 B001                                mov al, 1
    49 00000039 8887[10000000]                      mov [nmb+edi], al
    50 0000003F 47                                  inc edi
    51 00000040 EBE8                                jmp cont
    52                                          store_no_bit:
    53 00000042 B000                                mov al, 0
    54 00000044 8887[10000000]                      mov [nmb+edi], al
    55 0000004A 47                                  inc edi
    56 0000004B EBDF                                jmp cont2
    57                                          print_bin:
    58 0000004D A0[10000000]                        mov al, [nmb+0]
    59 00000052 83C604                              add esi, 4
    60 00000055 3C01                                cmp al, 1
    61 00000057 75AC                                jne read_string
    62                                              
    63 00000059 8935[20000000]                      mov [index], esi
    64 0000005F BE00000000                          mov esi, 0
    65 00000064 B908000000                          mov ecx, 8
    66 00000069 C605[0C000000]08                    mov byte [ccx], 8
    67                                              printing:
    68 00000070 8B0D[0C000000]                          mov ecx, [ccx]
    69 00000076 B800000000                              mov eax, 0
    70 0000007B 8A86[10000000]                          mov al, [nmb+esi]
    71 00000081 46                                      inc esi
    72                                                  
    73 00000082 50                                      push eax
    74 00000083 68[24000000]                            push dword dformat
    75 00000088 FF15[00000000]                          call [printf]
    76 0000008E 83C408                                  add esp, 4*2
    77                                                  
    78 00000091 83FE04                                  cmp esi, 4
    79 00000094 7416                                    je add_space
    80 00000096 83FE08                                  cmp esi, 8
    81 00000099 7411                                    je add_space
    82                                                  
    83 0000009B 832D[0C000000]01                        sub dword [ccx], 1
    84 000000A2 8B0D[0C000000]                          mov ecx, [ccx]
    85 000000A8 75C6                                    jnz printing
    86 000000AA 7413                                    jz cont3
    87                                                  
    88                                                  add_space:
    89 000000AC 68[27000000]                                push dword space
    90 000000B1 FF15[00000000]                              call [printf]
    91 000000B7 83C404                                      add esp, 4
    92                                                      
    93 000000BA 83FE08                                      cmp esi, 8
    94 000000BD 75B1                                        jne printing
    95                                              
    96                                              cont3:
    97 000000BF 8B35[20000000]                      mov esi, [index]
    98 000000C5 83FE0C                              cmp esi, len
    99 000000C8 0F8C37FFFFFF                        jl read_string
   100                                              
   101                                          fin:
   102                                          ; exit(0)
   103 000000CE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   104 000000D0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
