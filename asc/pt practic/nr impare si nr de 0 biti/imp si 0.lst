     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7200                        access_mode db "r", 0
    17 00000002 6669736965722E7478-         file_name db "fisier.txt", 0
    17 0000000B 7400               
    18 0000000D FFFFFFFF                    file_desc dd -1
    19 00000011 <res 00000008>              bin_string resb 8
    20 00000019 00000000                    no_0 dd 0
    21 0000001D 00000000                    nmb dd 0
    22 00000021 257820256400                dformat db "%x %d", 0
    23 00000027 00000000                    we_read_chr dd 0
    24 0000002B 00000000                    ccx dd 0
    25                                      len equ 100
    26 0000002F <res 00000064>              buffer resb len
    27 00000093 0D0A                        newline db 13, 10
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ;se da in segment numele unui fisier. acesta contine cifre separate prin spatiu(cifre baza 16). sa se afiseze fiecare cifra impara citita din fisier si numarul de biti 0 din reprezentarea binara a acesteia
    33 00000000 68[00000000]                    push dword access_mode
    34 00000005 68[02000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 8
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F842E010000                    je fin
    40                                          
    41 0000001C A3[0D000000]                    mov [file_desc], eax
    42                                          
    43                                          read_file:
    44 00000021 FF35[0D000000]                      push dword [file_desc]
    45 00000027 6A64                                push dword len
    46 00000029 6A01                                push dword 1
    47 0000002B 68[2F000000]                        push dword buffer
    48 00000030 FF15[00000000]                      call [fread]
    49 00000036 83C410                              add esp, 16
    50                                              
    51 00000039 83F800                              cmp eax, 0
    52 0000003C 0F84F9000000                        je cleanup
    53                                              
    54 00000042 A3[27000000]                        mov [we_read_chr], eax
    55 00000047 BE00000000                          mov esi, 0
    56                                              
    57                                              get_nmbs:
    58 0000004C 31C0                                    xor eax, eax
    59 0000004E 8A86[2F000000]                          mov al, [buffer+esi]
    60 00000054 3C31                                    cmp al, '1'
    61 00000056 742B                                    je found
    62 00000058 3C33                                    cmp al, '3'
    63 0000005A 7427                                    je found
    64 0000005C 3C35                                    cmp al, '5'
    65 0000005E 7423                                    je found
    66 00000060 3C37                                    cmp al, '7'
    67 00000062 741F                                    je found
    68 00000064 3C39                                    cmp al, '9'
    69 00000066 741B                                    je found
    70 00000068 3C62                                    cmp al, 'b'
    71 0000006A 7417                                    je found
    72 0000006C 3C64                                    cmp al, 'd'
    73 0000006E 7413                                    je found
    74 00000070 3C66                                    cmp al, 'f'
    75 00000072 740F                                    je found
    76                                                  
    77 00000074 46                                      inc esi
    78 00000075 3B35[27000000]                          cmp esi, [we_read_chr]
    79 0000007B 0F84B5000000                            je cont3
    80 00000081 75C9                                    jne get_nmbs
    81                                                  
    82                                                  found:
    83 00000083 3C62                                    cmp al, 'b'
    84 00000085 0F84A4000000                            je dec_more
    85 0000008B 3C64                                    cmp al, 'd'
    86 0000008D 0F849C000000                            je dec_more
    87 00000093 3C66                                    cmp al, 'f'
    88 00000095 0F8494000000                            je dec_more
    89 0000009B 2C30                                    sub al, 30h
    90                                                  back:
    91 0000009D A2[1D000000]                            mov byte [nmb], al
    92                                                  
    93 000000A2 88C3                                    mov bl, al
    94 000000A4 B908000000                              mov ecx, 8
    95 000000A9 C705[2B000000]0800-                     mov dword [ccx], 8
    95 000000B1 0000               
    96 000000B3 BF00000000                              mov edi, 0
    97                                                  get_bin:
    98 000000B8 8B0D[2B000000]                              mov ecx, [ccx]
    99 000000BE D0C3                                        rol bl, 1
   100 000000C0 720D                                        jc store_1
   101                                                      cont:
   102 000000C2 7316                                            jnc store_0
   103                                                          cont2:
   104 000000C4 49                                                  dec ecx
   105 000000C5 890D[2B000000]                                      mov [ccx], ecx
   106 000000CB 75EB                                                jnz get_bin
   107 000000CD 741D                                                jz print_nmb
   108                                                   
   109                                                  store_1:
   110 000000CF B001                                        mov al, 1
   111 000000D1 8887[11000000]                              mov [bin_string+edi], al
   112 000000D7 47                                          inc edi
   113 000000D8 EBE8                                        jmp cont
   114                                                      
   115                                                  store_0:
   116 000000DA B000                                        mov al, 0
   117 000000DC 8305[19000000]01                            add dword [no_0], 1
   118 000000E3 8887[11000000]                              mov [bin_string+edi], al
   119 000000E9 47                                          inc edi
   120 000000EA EBD8                                        jmp cont2
   121                                                      
   122                                                  print_nmb:
   123 000000EC 60                                          pushad
   124 000000ED FF35[19000000]                              push dword [no_0]
   125 000000F3 FF35[1D000000]                              push dword [nmb]
   126 000000F9 68[21000000]                                push dword dformat
   127 000000FE FF15[00000000]                              call [printf]
   128 00000104 83C40C                                      add esp, 12
   129                                                      
   130 00000107 68[93000000]                                push dword newline
   131 0000010C FF15[00000000]                              call [printf]
   132 00000112 83C404                                      add esp, 4
   133                                                      
   134 00000115 61                                          popad
   135                                                      
   136 00000116 C705[19000000]0000-                         mov dword [no_0], 0
   136 0000011E 0000               
   137 00000120 46                                          inc esi
   138 00000121 3B35[27000000]                              cmp esi, [we_read_chr]
   139 00000127 0F851FFFFFFF                                jne get_nmbs
   140 0000012D 7407                                        je cont3
   141                                                      
   142                                                 dec_more:
   143 0000012F 2C57                                        sub al, 57h
   144 00000131 E967FFFFFF                                  jmp back
   145                                          
   146                                          cont3:
   147 00000136 E9E6FEFFFF                          jmp read_file
   148                                              
   149                                          cleanup:
   150 0000013B FF35[0D000000]                      push dword [file_desc]
   151 00000141 FF15[00000000]                      call [fclose]
   152 00000147 83C404                              add esp, 4
   153                                              
   154                                          fin:
   155                                          ; exit(0)
   156 0000014A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   157 0000014C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
