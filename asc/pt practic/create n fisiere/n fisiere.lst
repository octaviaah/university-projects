     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 6669736965722E7478-         file_name db "fisier.txt", 0
    16 00000009 7400               
    17 0000000B 7200                        access_mode1 db "r", 0
    18 0000000D 7700                        access_mode2 db "w", 0
    19 0000000F FFFFFFFF                    file_descriptor dd -1
    20 00000013 692E6F75747075742E-         out_file_name1 db "i.output.txt", 0
    20 0000001C 74787400           
    21 00000020 69692E6F7574707574-         out_file_name2 db "ii.output.txt", 0
    21 00000029 2E74787400         
    22 0000002E FFFFFFFF                    file_desc1 dd -1
    23 00000032 FFFFFFFF                    file_desc2 dd -1
    24 00000036 <res 00000002>              nmb_chr resb 2
    25 00000038 00000000                    nmb dd 0
    26                                      len equ 4
    27 0000003C 00000000                    we_read_chr dd 0
    28 00000040 <res 00000004>              buffer resb len
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ;se citeste un numar din fisier(max 2 cifre cred). Sa se genereze n fisiere (i de la 0 la n) de forma "i.output.txt". 
    34 00000000 68[0B000000]                    push dword access_mode1
    35 00000005 68[00000000]                    push dword file_name
    36 0000000A FF15[00000000]                  call [fopen]
    37 00000010 83C408                          add esp, 8
    38                                          
    39 00000013 83F800                          cmp eax, 0
    40 00000016 0F846A010000                    je fin
    41                                          
    42 0000001C A3[0F000000]                    mov [file_descriptor], eax
    43                                          
    44                                          read_full_file:
    45 00000021 FF35[0F000000]                      push dword [file_descriptor]
    46 00000027 6A04                                push dword len
    47 00000029 6A01                                push dword 1
    48 0000002B 68[40000000]                        push dword buffer
    49 00000030 FF15[00000000]                      call [fread]
    50 00000036 83C410                              add esp, 16
    51                                              
    52 00000039 83F800                              cmp eax, 0
    53 0000003C 0F8435010000                        je cleanup
    54                                              
    55 00000042 A3[3C000000]                        mov [we_read_chr], eax
    56 00000047 BE00000000                          mov esi, 0
    57 0000004C BF00000000                          mov edi, 0
    58                                              
    59                                              transform_from_chr_to_nmb:
    60 00000051 8B1D[3C000000]                          mov ebx, [we_read_chr]
    61 00000057 83FB02                                  cmp ebx, 2
    62 0000005A 7415                                    je get_2_digit_nmb
    63 0000005C 8A86[40000000]                          mov al, [buffer+esi]
    64 00000062 8887[36000000]                          mov [nmb_chr+edi], al
    65 00000068 2C30                                    sub al, 30h
    66 0000006A A2[38000000]                            mov byte [nmb], al
    67 0000006F EB3D                                    jmp create_files_1
    68                                                  get_2_digit_nmb:
    69 00000071 8A86[40000000]                              mov al, [buffer+esi]
    70 00000077 8887[36000000]                              mov [nmb_chr+edi], al
    71 0000007D 2C30                                        sub al, 30h
    72                                                      
    73 0000007F B80A000000                                  mov eax, 10
    74 00000084 8B1D[36000000]                              mov ebx, [nmb_chr]
    75 0000008A F7E3                                        mul ebx
    76 0000008C A3[38000000]                                mov [nmb], eax
    77                                                      
    78 00000091 46                                          inc esi
    79 00000092 47                                          inc edi
    80 00000093 8A86[40000000]                              mov al, [buffer+esi]
    81 00000099 8887[36000000]                              mov [nmb_chr+edi], al
    82 0000009F 2C30                                        sub al, 30h
    83 000000A1 0005[38000000]                              add byte [nmb], al
    84 000000A7 EB58                                        jmp create_files_2
    85                                           
    86 000000A9 BE00000000                     mov esi, 0
    87                                         create_files_1:
    88 000000AE 31C0                                xor eax, eax
    89 000000B0 8A86[36000000]                      mov al, [nmb_chr+esi]
    90 000000B6 A2[13000000]                        mov [out_file_name1+0], al
    91                                              
    92 000000BB 68[0D000000]                        push dword access_mode2
    93 000000C0 68[13000000]                        push dword out_file_name1
    94 000000C5 FF15[00000000]                      call [fopen]
    95 000000CB 83C408                              add esp, 8
    96                                              
    97 000000CE 83F800                              cmp eax, 0
    98 000000D1 0F84AF000000                        je fin
    99                                              
   100 000000D7 A3[2E000000]                        mov [file_desc1], eax
   101                                              
   102 000000DC FF35[2E000000]                      push dword [file_desc1]
   103 000000E2 FF15[00000000]                      call [fclose]
   104 000000E8 83C404                              add esp, 4
   105                                              
   106 000000EB 80AE[36000000]01                    sub byte [nmb_chr+esi], 1
   107 000000F2 80BE[36000000]2F                    cmp byte[nmb_chr+esi], 2fh
   108 000000F9 0F8487000000                        je fin
   109 000000FF 75AD                                jne create_files_1
   110                                              
   111                                        create_files_2:
   112 00000101 31C0                                xor eax, eax
   113 00000103 A0[36000000]                        mov al, [nmb_chr+0]
   114 00000108 A2[20000000]                        mov [out_file_name2+0], al
   115                                              
   116 0000010D A0[37000000]                        mov al, [nmb_chr+1]
   117 00000112 A2[21000000]                        mov [out_file_name2+1], al
   118                                              
   119 00000117 68[0D000000]                        push dword access_mode2
   120 0000011C 68[20000000]                        push dword out_file_name2
   121 00000121 FF15[00000000]                      call [fopen]
   122 00000127 83C408                              add esp, 8
   123                                              
   124 0000012A 83F800                              cmp eax, 0
   125 0000012D 7457                                je fin
   126                                              
   127 0000012F A3[32000000]                        mov [file_desc2], eax
   128                                              
   129 00000134 FF35[32000000]                      push dword [file_desc2]
   130 0000013A FF15[00000000]                      call [fclose]
   131 00000140 83C404                              add esp, 4
   132                                              
   133 00000143 802D[37000000]01                    sub byte [nmb_chr+1], 1
   134 0000014A 803D[37000000]2F                    cmp byte[nmb_chr+1], 2fh
   135 00000151 7402                                je lower
   136 00000153 75AC                                jne create_files_2
   137                                              lower:
   138 00000155 8005[37000000]0A                        add byte [nmb_chr+1], 10
   139 0000015C 802D[36000000]01                        sub byte [nmb_chr+0], 1
   140 00000163 803D[36000000]30                        cmp byte [nmb_chr+0], 30h
   141 0000016A BE01000000                              mov esi, 1
   142 0000016F 0F8439FFFFFF                            je create_files_1
   143 00000175 758A                                    jne create_files_2
   144                                              
   145                                         cleanup:
   146 00000177 FF35[0F000000]                      push dword [file_descriptor]
   147 0000017D FF15[00000000]                      call [fclose]
   148 00000183 83C404                              add esp, 4
   149                                              
   150                                          fin:
   151                                          ; exit(0)
   152 00000186 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   153 00000188 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
