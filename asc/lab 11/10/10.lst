     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf           ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  extern search
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data public
    16 00000000 00                          n db 0
    17 00000001 00                          first_word_found db 0
    18                                      len equ 20
    19 00000002 00<rept>                    wrd times len db 0
    20 00000016 6E3D00                      message_n db "n=", 0
    21 00000019 656E74657220776F72-         message_words db "enter words:", 0
    21 00000022 64733A00           
    22 00000026 256400                      dformat db "%d", 0
    23 00000029 257300                      sformat db "%s", 0
    24 0000002C 00<rept>                    first_wrd times len db 0
    25 00000040 01                          substring db 1
    26 00000041 6E6F20737562737472-         bad_message db "no substring", 0
    26 0000004A 696E6700           
    27 0000004E 796573207375627374-         good_message db "yes substring", 0
    27 00000057 72696E6700         
    28                                  ; our code starts here
    29                                  segment code use32 class=code public
    30                                      start:
    31                                      ;Multiple strings of characters are being read. Determine whether the first appears as a subsequence in each of the others and give an appropriate message.
    32 00000000 68[16000000]                    push dword message_n; announce we will read n
    33 00000005 FF15[00000000]                  call [printf]
    34 0000000B 83C404                          add esp, 4*1
    35                                          
    36 0000000E 68[00000000]                    push dword n ;read the number of words we will read
    37 00000013 68[26000000]                    push dword dformat
    38 00000018 FF15[00000000]                  call [scanf]
    39 0000001E 83C408                          add esp, 4*2
    40                                          
    41 00000021 68[19000000]                    push dword message_words; announce we will read the words
    42 00000026 FF15[00000000]                  call [printf]
    43 0000002C 83C404                          add esp, 4*1
    44                                          
    45                                          repeta:
    46 0000002F B900000000                          mov ecx, 0
    47 00000034 8A0D[00000000]                      mov cl, [n] ;bc ecx gets different values when we read new words, we will use n as our limit
    48 0000003A 83F900                              cmp ecx, 0
    49 0000003D 7474                                je done
    50                                              
    51 0000003F 8B15[01000000]                      mov edx, [first_word_found] ;we search for the first word
    52 00000045 83FA00                              cmp edx, 0
    53 00000048 7443                                je first_word
    54 0000004A 68[02000000]                        push dword wrd; read next word
    55 0000004F 68[29000000]                        push dword sformat
    56 00000054 FF15[00000000]                      call [scanf]
    57 0000005A 83C408                              add esp, 4*2
    58                                              
    59 0000005D A1[2C000000]                        mov eax, dword [first_wrd]
    60 00000062 8B1D[02000000]                      mov ebx, dword [wrd]
    61 00000068 53                                  push ebx
    62 00000069 50                                  push eax
    63                                              
    64 0000006A E8(00000000)                        call search
    65 0000006F 83FA00                              cmp edx, 0
    66 00000072 7409                                je not_good
    67                                              
    68 00000074 802D[00000000]01                    sub byte [n], 1
    69 0000007B EBB2                                jmp repeta
    70                                              
    71                                              not_good:
    72 0000007D C605[40000000]00                        mov byte [substring], 0
    73 00000084 802D[00000000]01                        sub byte [n], 1
    74 0000008B EBA2                                    jmp repeta
    75                                              
    76                                              first_word:
    77 0000008D C605[01000000]01                        mov byte [first_word_found], 1
    78 00000094 68[2C000000]                            push dword first_wrd; read first word
    79 00000099 68[29000000]                            push dword sformat
    80 0000009E FF15[00000000]                          call [scanf]
    81 000000A4 83C408                                  add esp, 4*2
    82 000000A7 802D[00000000]01                        sub byte [n], 1
    83 000000AE E97CFFFFFF                              jmp repeta
    84                                          
    85                                          done:
    86 000000B3 BA00000000                          mov edx, 0
    87 000000B8 8A15[40000000]                      mov dl, byte [substring]
    88 000000BE 83FA01                              cmp edx, 1
    89 000000C1 7410                                je good_m
    90 000000C3 68[41000000]                        push dword bad_message
    91 000000C8 FF15[00000000]                      call [printf]
    92 000000CE 83C404                              add esp, 4
    93 000000D1 EB0E                                jmp fin
    94                                              good_m:
    95 000000D3 68[4E000000]                            push dword good_message
    96 000000D8 FF15[00000000]                          call [printf]
    97 000000DE 83C404                                  add esp, 4
    98                                          ; exit(0)
    99                                          fin:
   100 000000E1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   101 000000E3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
