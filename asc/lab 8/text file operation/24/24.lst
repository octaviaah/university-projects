     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 6D616D612E74787400          file_name db "mama.txt", 0
    16 00000009 7700                        access_mode db "w", 0
    17 0000000B FFFFFFFF                    file_descriptor dd -1
    18 0000000F 6133363532756D2033-         text db "a3652um 3st3 se!ra. si 212155 558 va j8ca B8RNL3Y!!!", 0
    18 00000018 737433207365217261-
    18 00000021 2E2073692032313231-
    18 0000002A 353520353538207661-
    18 00000033 206A38636120423852-
    18 0000003C 4E4C335921212100   
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;A file name and a text (defined in data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all digits from the text with character 'C'. Create
    24 00000000 68[09000000]                    push dword access_mode
    25 00000005 68[00000000]                    push dword file_name
    26 0000000A FF15[00000000]                  call [fopen]
    27 00000010 83C408                          add esp, 8
    28                                          
    29 00000013 83F800                          cmp eax, 0
    30 00000016 7466                            je fin
    31                                          
    32 00000018 A3[0B000000]                    mov [file_descriptor], eax
    33 0000001D BE00000000                      mov esi, 0
    34 00000022 BF00000000                      mov edi, 0
    35                                          
    36                                          read_text:
    37 00000027 8A86[0F000000]                      mov al, [text+esi]
    38 0000002D 3C30                                cmp al, '0'
    39 0000002F 7219                                jb not_found
    40 00000031 3C39                                cmp al, '9'
    41 00000033 7715                                ja not_found
    42 00000035 B043                                mov al, 'C'
    43 00000037 8887[0F000000]                      mov [text+edi], al
    44 0000003D 46                                  inc esi
    45 0000003E 47                                  inc edi
    46 0000003F 80BE[0F000000]00                    cmp byte [text+esi], 0
    47 00000046 7413                                je write_text
    48 00000048 75DD                                jne read_text
    49                                              not_found:
    50 0000004A 8887[0F000000]                          mov [text+edi], al
    51 00000050 46                                      inc esi
    52 00000051 47                                      inc edi
    53 00000052 80BE[0F000000]00                        cmp byte [text+esi], 0
    54 00000059 75CC                                    jne read_text
    55                                          
    56                                          write_text:
    57 0000005B 68[0F000000]                        push dword text
    58 00000060 FF35[0B000000]                      push dword [file_descriptor]
    59 00000066 FF15[00000000]                      call [fprintf]
    60 0000006C 83C408                              add esp, 8
    61                                              
    62 0000006F FF35[0B000000]                      push dword [file_descriptor]
    63 00000075 FF15[00000000]                      call [fclose]
    64 0000007B 83C404                              add esp, 4
    65                                              
    66                                          fin:
    67                                          ; exit(0)
    68 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
