     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 656C5F66696C652E74-         file_name db "el_file.txt", 0
    15 00000009 787400             
    16 0000000C 9D670000                    nmb dd 26525
    17 00000010 7700                        access_mode db "w", 0
    18 00000012 FFFFFFFF                    file_descriptor dd -1
    19 00000016 256300                      cformat db "%c", 0
    20 00000019 <res 00000009>              nmb_chr resb 9
    21 00000022 0D                          newline db 13
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;A file name and a decimal number (on 16 bits) are given (the decimal number is in the unsigned interpretation). Create a file with the given name and write each digit composing the number on a different lin
    27 00000000 68[10000000]                    push dword access_mode
    28 00000005 68[00000000]                    push dword file_name
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 8
    31                                          
    32 00000013 83F800                          cmp eax, 0
    33 00000016 0F8489000000                    je fin
    34                                          
    35 0000001C A3[12000000]                    mov [file_descriptor], eax
    36 00000021 A1[0C000000]                    mov eax, [nmb]
    37 00000026 BF07000000                      mov edi, 7
    38                                          
    39                                          convert_nmb_to_chr:
    40 0000002B BA00000000                          mov edx, 0
    41 00000030 BB0A000000                          mov ebx, 10
    42 00000035 F7F3                                div ebx
    43 00000037 83C230                              add edx, 30h
    44                                              
    45 0000003A 89C1                                mov ecx, eax
    46 0000003C 89D0                                mov eax, edx
    47                                              
    48 0000003E 8887[19000000]                      mov [nmb_chr+edi], al
    49 00000044 4F                                  dec edi
    50                                              
    51 00000045 89C8                                mov eax, ecx
    52 00000047 83F800                              cmp eax, 0
    53 0000004A 75DF                                jne convert_nmb_to_chr
    54                                              
    55 0000004C BE00000000                      mov esi, 0
    56                                          start_to_add:
    57 00000051 80BE[19000000]00                    cmp byte [nmb_chr+esi], 0
    58 00000058 7503                                jne print_digit
    59 0000005A 46                                  inc esi
    60 0000005B EBF4                                jmp start_to_add
    61                                              
    62                                          print_digit:
    63 0000005D 31C0                                xor eax, eax
    64 0000005F 8A86[19000000]                      mov al, [nmb_chr+esi]
    65 00000065 50                                  push eax
    66 00000066 68[16000000]                        push dword cformat
    67 0000006B FF35[12000000]                      push dword [file_descriptor]
    68 00000071 FF15[00000000]                      call [fprintf]
    69 00000077 83C40C                              add esp, 12
    70                                              
    71 0000007A 68[22000000]                        push dword newline
    72 0000007F FF35[12000000]                      push dword [file_descriptor]
    73 00000085 FF15[00000000]                      call [fprintf]
    74 0000008B 83C408                              add esp, 8
    75                                              
    76 0000008E 46                                  inc esi
    77 0000008F 83FE08                              cmp esi, 8
    78 00000092 7402                                je cleanup
    79 00000094 75C7                                jne print_digit
    80                                              
    81                                          cleanup:
    82 00000096 FF35[12000000]                      push dword [file_descriptor]
    83 0000009C FF15[00000000]                      call [fclose]
    84 000000A2 83C404                              add esp, 4
    85                                          
    86                                          fin:
    87                                          ; exit(0)
    88 000000A5 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 000000A7 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
