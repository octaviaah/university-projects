     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7700                        access_mode db "w", 0
    17 00000002 6D7966696C652E7478-         file_name db "myfile.txt", 0
    17 0000000B 7400               
    18 0000000D <res 00000014>              wrd resb 20
    19 00000021 FFFFFFFF                    file_descriptor dd -1
    20 00000025 257300                      sformat db "%s", 0
    21 00000028 0D                          newline db 13
    22                                      
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ;A file name is given (defined in the data segment). Create a file with the given name, then read words from the keyboard and write those words in the file, until character '$' is read from the keyboard.
    28 00000000 68[00000000]                    push dword access_mode
    29 00000005 68[02000000]                    push dword file_name
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp, 8
    32                                          
    33 00000013 83F800                          cmp eax, 0
    34 00000016 746E                            je fin
    35                                          
    36 00000018 A3[21000000]                    mov [file_descriptor], eax
    37                                          
    38                                          the_loop:
    39 0000001D 68[0D000000]                        push dword wrd
    40 00000022 68[25000000]                        push dword sformat
    41 00000027 FF15[00000000]                      call [scanf]
    42 0000002D 83C408                              add esp, 8
    43                                              
    44 00000030 8B35[0D000000]                      mov esi, [wrd]
    45 00000036 83FE24                              cmp esi, '$'
    46 00000039 743C                                je cls
    47                                              
    48 0000003B 68[0D000000]                        push dword wrd
    49 00000040 FF35[21000000]                      push dword [file_descriptor]
    50 00000046 FF15[00000000]                      call [fprintf]
    51 0000004C 83C408                              add esp, 8
    52                                              
    53 0000004F 68[28000000]                        push dword newline
    54 00000054 FF35[21000000]                      push dword [file_descriptor]
    55 0000005A FF15[00000000]                      call [fprintf]
    56 00000060 83C408                              add esp, 8
    57                                              
    58 00000063 BF00000000                          mov edi, 0
    59                                              cleanup:
    60 00000068 C687[0D000000]00                        mov [wrd+edi], byte 0
    61 0000006F 47                                      inc edi
    62 00000070 83FF14                                  cmp edi, 20
    63 00000073 75F3                                    jne cleanup
    64                                              
    65 00000075 EBA6                                jmp the_loop
    66                                              
    67                                          
    68                                          cls:
    69 00000077 FF35[21000000]                      push dword [file_descriptor]
    70 0000007D FF15[00000000]                      call [fclose]
    71 00000083 83C404                              add esp, 4
    72                                              
    73                                          fin:
    74                                              
    75                                          ; exit(0)
    76 00000086 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000088 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
