     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 6D61676D612E747874-         file_name db "magma.txt", 0
    15 00000009 00                 
    16 0000000A FFFFFFFF                    file_descriptor dd -1
    17 0000000E 7700                        access_mode db "w", 0
    18 00000010 00000000                    sum dd 0
    19 00000014 6D616D612061726520-         text db "mama are 100 mere. tata are 22 mere. in total ei au 122 mere.", 0
    19 0000001D 313030206D6572652E-
    19 00000026 207461746120617265-
    19 0000002F 203232206D6572652E-
    19 00000038 20696E20746F74616C-
    19 00000041 206569206175203132-
    19 0000004A 32206D6572652E00   
    20 00000052 256400                      dformat db "%d", 0
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;A file name and a text (which can contain any type of character) are given in data segment. Calculate the sum of digits in the text. Create a file with the given name and write the result to file.
    27 00000000 68[0E000000]                    push dword access_mode
    28 00000005 68[00000000]                    push dword file_name
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 8
    31                                          
    32 00000013 83F800                          cmp eax, 0
    33 00000016 7461                            je fin
    34                                          
    35 00000018 A3[0A000000]                    mov [file_descriptor], eax
    36 0000001D BE00000000                      mov esi, 0
    37                                          
    38                                          read_text:
    39 00000022 31C0                                xor eax, eax
    40 00000024 8A86[14000000]                      mov al, [text+esi]
    41 0000002A 3C30                                cmp al, '0'
    42 0000002C 7218                                jb not_found
    43 0000002E 3C39                                cmp al, '9'
    44 00000030 7714                                ja not_found
    45 00000032 2C30                                sub al, 30h
    46 00000034 0105[10000000]                      add [sum], eax
    47 0000003A 46                                  inc esi
    48 0000003B 80BE[14000000]00                    cmp byte [text+esi], 0
    49 00000042 740C                                je write_file
    50 00000044 75DC                                jne read_text
    51                                              not_found:
    52 00000046 46                                      inc esi
    53 00000047 80BE[14000000]00                        cmp byte [text+esi], 0
    54 0000004E 75D2                                    jne read_text
    55                                              
    56                                          write_file:
    57 00000050 FF35[10000000]                      push dword [sum]
    58 00000056 68[52000000]                        push dword dformat
    59 0000005B FF35[0A000000]                      push dword [file_descriptor]
    60 00000061 FF15[00000000]                      call [fprintf]
    61 00000067 83C40C                              add esp, 12
    62                                                  
    63                                          cleanup:
    64 0000006A FF35[0A000000]                      push dword [file_descriptor]
    65 00000070 FF15[00000000]                      call [fclose]
    66 00000076 83C404                              add esp, 4
    67                                          
    68                                          fin:
    69                                          ; exit(0)
    70 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
