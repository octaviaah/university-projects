     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fread msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 6D61782E74787400            file_name db "max.txt", 0
    17 00000008 612B00                      access_mode db "a+", 0
    18 0000000B FFFFFFFF                    file_descriptor dd -1
    19 0000000F 256400                      dformat db "%d", 0
    20 00000012 00000000                    we_read_chr dd 0
    21 00000016 00000000                    index dd 0
    22 0000001A 00000000                    nmb dd 0
    23 0000001E 00000000                    maxi dd 0
    24 00000022 <res 00000009>              nmb_chr resb 9
    25                                      len equ 100
    26 0000002B <res 00000064>              buffer resb 100
    27 0000008F 0D                          newline db 13
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ;A text file is given. The text file contains numbers (in base 10) separated by spaces. Read the content of the file, determine the minimum number (from the numbers that have been read) and write the result 
    33 00000000 68[08000000]                    push dword access_mode
    34 00000005 68[00000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 8
    37                                          
    38 00000013 83F800                          cmp eax, 0
    39 00000016 0F8411010000                    je fin
    40                                          
    41 0000001C A3[0B000000]                    mov [file_descriptor], eax
    42                                          
    43                                          read_full_file:
    44 00000021 FF35[0B000000]                      push dword [file_descriptor]
    45 00000027 6A64                                push dword len
    46 00000029 6A01                                push dword 1
    47 0000002B 68[2B000000]                        push dword buffer
    48 00000030 FF15[00000000]                      call [fread]
    49 00000036 83C410                              add esp, 16
    50                                              
    51 00000039 83F800                              cmp eax, 0
    52 0000003C 0F84AE000000                        je cleanup
    53                                              
    54 00000042 A3[12000000]                        mov [we_read_chr], eax
    55 00000047 BE00000000                          mov esi, 0
    56 0000004C BF00000000                          mov edi, 0
    57                                              
    58                                              see_nmb:
    59 00000051 8A86[2B000000]                          mov al, [buffer+esi]
    60 00000057 3C30                                    cmp al, '0'
    61 00000059 7218                                    jb not_found
    62 0000005B 3C39                                    cmp al, '9'
    63 0000005D 7714                                    ja not_found
    64 0000005F 2C30                                    sub al, 30h
    65 00000061 8887[22000000]                          mov [nmb_chr+edi], al
    66 00000067 47                                      inc edi
    67 00000068 46                                      inc esi
    68 00000069 3B35[12000000]                          cmp esi, [we_read_chr]
    69 0000006F 75E0                                    jne see_nmb
    70 00000071 7478                                    je cont
    71                                                  not_found:
    72 00000073 C687[22000000]21                            mov byte [nmb_chr+edi], 21h
    73 0000007A BF00000000                                  mov edi, 0
    74 0000007F 31C0                                        xor eax, eax
    75 00000081 BB0A000000                                  mov ebx, 10
    76                                                      
    77 00000086 8935[16000000]                              mov [index], esi
    78                                                      
    79 0000008C BE00000000                                  mov esi, 0
    80                                                      create_number:
    81 00000091 F7E3                                            mul ebx
    82 00000093 89C1                                            mov ecx, eax
    83 00000095 31C0                                            xor eax, eax
    84 00000097 8A86[22000000]                                  mov al, [nmb_chr+esi]
    85 0000009D 01C1                                            add ecx, eax
    86 0000009F 890D[1A000000]                                  mov [nmb], ecx
    87 000000A5 89C8                                            mov eax, ecx
    88 000000A7 46                                              inc esi
    89 000000A8 80BE[22000000]21                                cmp byte [nmb_chr+esi], 21h
    90 000000AF 75E0                                            jne create_number
    91                                                          
    92                                                     contt:     
    93 000000B1 A1[1A000000]                               mov eax, [nmb]
    94 000000B6 3B05[1E000000]                             cmp eax, dword [maxi]
    95 000000BC 7E05                                       jle not_max
    96 000000BE A3[1E000000]                               mov [maxi], eax
    97                                                     
    98                                                     not_max:  
    99                                                          clean:
   100 000000C3 C787[22000000]0000-                                 mov dword [nmb_chr+edi], 0
   100 000000CB 0000               
   101 000000CD 47                                                  inc edi
   102 000000CE 83FF08                                              cmp edi, 8
   103 000000D1 75F0                                                jne clean
   104 000000D3 BF00000000                                 mov edi, 0
   105 000000D8 8B35[16000000]                             mov esi, [index]
   106 000000DE 46                                         inc esi
   107 000000DF 3B35[12000000]                             cmp esi, [we_read_chr]
   108 000000E5 0F8566FFFFFF                               jne see_nmb
   109                                                     
   110                                            cont:
   111 000000EB E931FFFFFF                          jmp read_full_file
   112                                                          
   113                                           cleanup:
   114 000000F0 68[8F000000]                        push dword newline
   115 000000F5 FF35[0B000000]                      push dword [file_descriptor]
   116 000000FB FF15[00000000]                      call [fprintf]
   117 00000101 83C408                              add esp, 8
   118                                              
   119 00000104 FF35[1E000000]                      push dword [maxi]
   120 0000010A 68[0F000000]                        push dword dformat
   121 0000010F FF35[0B000000]                      push dword [file_descriptor]
   122 00000115 FF15[00000000]                      call [fprintf]
   123 0000011B 83C40C                              add esp, 12
   124                                              
   125 0000011E FF35[0B000000]                      push dword [file_descriptor]
   126 00000124 FF15[00000000]                      call [fclose]
   127 0000012A 83C404                              add esp, 4
   128                                           
   129                                         fin:
   130                                          ; exit(0)
   131 0000012D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   132 0000012F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
