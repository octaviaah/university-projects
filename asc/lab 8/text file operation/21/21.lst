     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 6D616D612E74787400          file_name db "mama.txt", 0
    16 00000009 7700                        access_mode db "w", 0
    17 0000000B FFFFFFFF                    file_descriptor dd -1
    18 0000000F 6133363532756D2033-         text db "a3652um 3st3 se!ra. si 212155 558 va j8ca B8RNL3Y!!!", 0
    18 00000018 737433207365217261-
    18 00000021 2E2073692032313231-
    18 0000002A 353520353538207661-
    18 00000033 206A38636120423852-
    18 0000003C 4E4C335921212100   
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;A file name and a text (defined in the data segment) are given. The text contains lowercase letters, digits and spaces. Replace all the digits on odd positions with the character ‘X’. Create the file wi
    24 00000000 68[09000000]                    push dword access_mode
    25 00000005 68[00000000]                    push dword file_name
    26 0000000A FF15[00000000]                  call [fopen]
    27 00000010 83C408                          add esp, 8
    28                                          
    29 00000013 83F800                          cmp eax, 0
    30 00000016 0F8494000000                    je fin
    31                                          
    32 0000001C A3[0B000000]                    mov [file_descriptor], eax
    33 00000021 BE00000000                      mov esi, 0
    34 00000026 BF00000000                      mov edi, 0
    35                                          
    36                                          read_text:
    37 0000002B 8A86[0F000000]                      mov al, [text+esi]
    38 00000031 3C30                                cmp al, '0'
    39 00000033 7247                                jb not_found
    40 00000035 3C39                                cmp al, '9'
    41 00000037 7743                                ja not_found
    42 00000039 88C3                                mov bl, al
    43 0000003B 89F0                                mov eax, esi
    44 0000003D BA00000000                          mov edx, 0
    45 00000042 B902000000                          mov ecx, 2
    46 00000047 F7F1                                div ecx
    47 00000049 83FA01                              cmp edx, 1
    48 0000004C 7417                                je add_X
    49 0000004E 31C0                                xor eax, eax
    50 00000050 88D8                                mov al, bl
    51 00000052 8887[0F000000]                      mov [text+edi], al
    52 00000058 46                                  inc esi
    53 00000059 47                                  inc edi
    54 0000005A 80BE[0F000000]00                    cmp byte [text+esi], 0
    55 00000061 742A                                je write_text
    56 00000063 75C6                                jne read_text
    57                                              add_X:
    58 00000065 31C0                                    xor eax, eax
    59 00000067 B058                                    mov al, 'X'
    60 00000069 8887[0F000000]                          mov [text+edi], al
    61 0000006F 46                                      inc esi
    62 00000070 47                                      inc edi
    63 00000071 80BE[0F000000]00                        cmp byte [text+esi], 0
    64 00000078 7413                                    je write_text
    65 0000007A 75AF                                    jne read_text
    66                                              not_found:
    67 0000007C 8887[0F000000]                          mov [text+edi], al
    68 00000082 46                                      inc esi
    69 00000083 47                                      inc edi
    70 00000084 80BE[0F000000]00                        cmp byte [text+esi], 0
    71 0000008B 759E                                    jne read_text
    72                                          
    73                                          write_text:
    74 0000008D 68[0F000000]                        push dword text
    75 00000092 FF35[0B000000]                      push dword [file_descriptor]
    76 00000098 FF15[00000000]                      call [fprintf]
    77 0000009E 83C408                              add esp, 8
    78                                              
    79 000000A1 FF35[0B000000]                      push dword [file_descriptor]
    80 000000A7 FF15[00000000]                      call [fclose]
    81 000000AD 83C404                              add esp, 4
    82                                              
    83                                          fin:
    84                                          ; exit(0)
    85 000000B0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    86 000000B2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
