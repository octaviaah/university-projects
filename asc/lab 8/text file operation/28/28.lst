     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7700                        access_mode db "w", 0
    17 00000002 6D7966696C652E7478-         file_name db "myfile.txt", 0
    17 0000000B 7400               
    18 0000000D <res 00000014>              wrd resb 20
    19 00000021 FFFFFFFF                    file_descriptor dd -1
    20 00000025 257300                      sformat db "%s", 0
    21 00000028 0D                          newline db 13
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;A file name (defined in data segment) is given. Create a file with the given name, then read words from the keyboard until character '$' is read. Write only the words that contain at least one lowercase let
    27 00000000 68[00000000]                    push dword access_mode
    28 00000005 68[02000000]                    push dword file_name
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 8
    31                                          
    32 00000013 83F800                          cmp eax, 0
    33 00000016 0F848F000000                    je fin
    34                                          
    35 0000001C A3[21000000]                    mov [file_descriptor], eax
    36                                          
    37                                          the_loop:
    38 00000021 68[0D000000]                        push dword wrd
    39 00000026 68[25000000]                        push dword sformat
    40 0000002B FF15[00000000]                      call [scanf]
    41 00000031 83C408                              add esp, 8
    42                                              
    43 00000034 8B35[0D000000]                      mov esi, [wrd]
    44 0000003A 83FE24                              cmp esi, '$'
    45 0000003D 745D                                je cls
    46                                              
    47 0000003F BE00000000                          mov esi, 0
    48                                              search_upr:
    49 00000044 8A86[0D000000]                          mov al, [wrd+esi]
    50 0000004A 3C61                                    cmp al, 'a'
    51 0000004C 7206                                    jb not_found
    52 0000004E 3C7A                                    cmp al, 'z'
    53 00000050 7702                                    ja not_found
    54 00000052 EB0C                                    jmp print_word
    55                                                  not_found:
    56 00000054 46                                          inc esi
    57 00000055 80BE[0D000000]00                            cmp byte[wrd+esi], 0
    58 0000005C 75E6                                        jne search_upr
    59 0000005E 7428                                        je cont
    60                                                      
    61                                              print_word:
    62 00000060 68[0D000000]                            push dword wrd
    63 00000065 FF35[21000000]                          push dword [file_descriptor]
    64 0000006B FF15[00000000]                          call [fprintf]
    65 00000071 83C408                                  add esp, 8
    66                                              
    67 00000074 68[28000000]                            push dword newline
    68 00000079 FF35[21000000]                          push dword [file_descriptor]
    69 0000007F FF15[00000000]                          call [fprintf]
    70 00000085 83C408                                  add esp, 8
    71                                                  
    72                                              cont:
    73 00000088 BF00000000                          mov edi, 0
    74                                              cleanup:
    75 0000008D C687[0D000000]00                        mov [wrd+edi], byte 0
    76 00000094 47                                      inc edi
    77 00000095 83FF14                                  cmp edi, 20
    78 00000098 75F3                                    jne cleanup
    79                                              
    80 0000009A EB85                                jmp the_loop
    81                                              
    82                                          
    83                                          cls:
    84 0000009C FF35[21000000]                      push dword [file_descriptor]
    85 000000A2 FF15[00000000]                      call [fclose]
    86 000000A8 83C404                              add esp, 4
    87                                              
    88                                          fin:
    89                                          ; exit(0)
    90 000000AB 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 000000AD FF15[00000000]                  call    [exit]       ; call exit to terminate the program
