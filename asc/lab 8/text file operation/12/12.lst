     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf,  fopen, fclose              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 6C6566696C652E7478-         file_name db "lefile.txt", 0
    16 00000009 7400               
    17 0000000B 7700                        access_mode db "w", 0
    18 0000000D <res 00000008>              nmb resb 8
    19 00000015 256400                      dformat db "%d", 0
    20 00000018 FFFFFFFF                    file_descriptor dd -1
    21 0000001C 0D                          newline db 13
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;A file name is given (defined in the data segment). Create a file with the given name, then read numbers from the keyboard and write those numbers in the file, until the value '0' is read from the keyboard.
    27 00000000 68[0B000000]                    push dword access_mode
    28 00000005 68[00000000]                    push dword file_name
    29 0000000A FF15[00000000]                  call [fopen]
    30 00000010 83C408                          add esp, 8
    31                                          
    32 00000013 83F800                          cmp eax, 0
    33 00000016 0F84B2000000                    je fin
    34                                          
    35 0000001C A3[18000000]                    mov [file_descriptor], eax
    36                                          
    37                                          the_loop:
    38 00000021 68[0D000000]                        push dword nmb
    39 00000026 68[15000000]                        push dword dformat
    40 0000002B FF15[00000000]                      call [scanf]
    41 00000031 83C408                              add esp, 8
    42                                              
    43 00000034 A1[0D000000]                        mov eax, dword [nmb]
    44 00000039 8B15[11000000]                      mov edx, dword [nmb+4]
    45 0000003F 83F800                              cmp eax, 0
    46 00000042 7442                                je cont_verifying
    47                                              
    48 00000044 FF35[0D000000]                      push dword [nmb]
    49 0000004A 68[15000000]                        push dword dformat
    50 0000004F FF35[18000000]                      push dword [file_descriptor]
    51 00000055 FF15[00000000]                      call [fprintf]
    52 0000005B 83C410                              add esp, 16
    53                                              
    54 0000005E 68[1C000000]                        push dword newline
    55 00000063 FF35[18000000]                      push dword [file_descriptor]
    56 00000069 FF15[00000000]                      call [fprintf]
    57 0000006F 83C408                              add esp, 8
    58                                              
    59 00000072 C705[0D000000]0000-                 mov dword [nmb], 0
    59 0000007A 0000               
    60 0000007C C705[11000000]0000-                 mov dword [nmb+4], 0
    60 00000084 0000               
    61                                              
    62                                              cont_verifying:
    63 00000086 83FA00                                  cmp edx, 0
    64 00000089 7434                                    je cleanup
    65                                                  
    66 0000008B FF35[0D000000]                          push dword [nmb]
    67 00000091 FF35[11000000]                          push dword [nmb+4]
    68 00000097 FF35[18000000]                          push dword [file_descriptor]
    69 0000009D FF15[00000000]                          call [fprintf]
    70 000000A3 83C40C                                  add esp, 12
    71                                              
    72 000000A6 C705[0D000000]0000-                     mov dword [nmb], 0
    72 000000AE 0000               
    73 000000B0 C705[11000000]0000-                     mov dword [nmb+4], 0
    73 000000B8 0000               
    74 000000BA E962FFFFFF                         jmp the_loop
    75                                  
    76                                             cleanup:
    77 000000BF FF35[18000000]                        push dword [file_descriptor]
    78 000000C5 FF15[00000000]                        call [fclose]
    79 000000CB 83C404                                add esp, 4
    80                                          
    81                                          fin:
    82                                          ; exit(0)
    83 000000CE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 000000D0 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
