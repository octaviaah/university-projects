     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, fopen, fread, fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00000000                    nmb_even dd 0
    17 00000004 00000000                    we_read_chr dd 0
    18 00000008 746865206E6D62206F-         message_even db "the nmb of even numbers: %d", 0
    18 00000011 66206576656E206E75-
    18 0000001A 6D626572733A202564-
    18 00000023 00                 
    19 00000024 74686566696C652E74-         file_name db "thefile.txt", 0
    19 0000002D 787400             
    20 00000030 FFFFFFFF                    file_descriptor dd -1
    21 00000034 7200                        access_mode db "r", 0
    22                                      len equ 100
    23 00000036 <res 00000064>              buffer resb len
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ;A text file is given. Read the content of the file, count the number of even digits and display the result on the screen. The name of text file is defined in the data segment.
    29 00000000 68[34000000]                    push dword access_mode
    30 00000005 68[24000000]                    push dword file_name
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add esp, 4*2
    33                                          
    34 00000013 83F800                          cmp eax, 0
    35 00000016 7471                            je fin
    36                                          
    37 00000018 A3[30000000]                    mov [file_descriptor], eax
    38                                          
    39                                          read_full_file:
    40 0000001D FF35[30000000]                      push dword [file_descriptor]
    41 00000023 6A64                                push dword len
    42 00000025 6A01                                push dword 1
    43 00000027 68[36000000]                        push dword buffer
    44 0000002C FF15[00000000]                      call [fread]
    45 00000032 83C410                              add esp, 4*4
    46                                              
    47 00000035 83F800                              cmp eax, 0
    48 00000038 7441                                je cleanup
    49                                              
    50 0000003A A3[04000000]                        mov [we_read_chr], eax
    51 0000003F BE00000000                          mov esi, 0
    52                                              
    53                                              find_even:
    54 00000044 8A86[36000000]                          mov al, [buffer+esi]
    55 0000004A 3C30                                    cmp al, '0'
    56 0000004C 741B                                    je add_even
    57 0000004E 3C32                                    cmp al, '2'
    58 00000050 7417                                    je add_even
    59 00000052 3C34                                    cmp al, '4'
    60 00000054 7413                                    je add_even
    61 00000056 3C36                                    cmp al, '6'
    62 00000058 740F                                    je add_even
    63 0000005A 3C38                                    cmp al, '8'
    64 0000005C 740B                                    je add_even
    65 0000005E 46                                      inc esi
    66 0000005F 3B35[04000000]                          cmp esi, dword [we_read_chr]
    67 00000065 75DD                                    jne find_even
    68 00000067 7410                                    je cont
    69                                                  add_even:
    70 00000069 8305[00000000]01                            add dword[nmb_even], 1
    71 00000070 46                                          inc esi
    72 00000071 3B35[04000000]                              cmp esi, dword [we_read_chr]
    73 00000077 75CB                                        jne find_even
    74                                                      
    75                                              cont:
    76 00000079 EBA2                                    jmp read_full_file
    77                                              
    78                                              cleanup:
    79 0000007B 68[30000000]                            push dword file_descriptor
    80 00000080 FF15[00000000]                          call [fclose]
    81 00000086 83C404                                  add esp, 4
    82                                          
    83                                          fin:
    84 00000089 FF35[00000000]                      push dword [nmb_even]
    85 0000008F 68[08000000]                        push dword message_even
    86 00000094 FF15[00000000]                      call [printf]
    87 0000009A 83C408                              add esp, 4*2
    88                                          ; exit(0)
    89 0000009D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    90 0000009F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
