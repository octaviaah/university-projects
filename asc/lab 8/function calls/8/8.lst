     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 C4090000                    a dd 2500
    15 00000004 00000000                    b dd 0
    16 00000008 74686520726573756C-         message db "the result is: %d", 0
    16 00000011 742069733A20256400 
    17 0000001A 623D00                      message_b db "b=", 0
    18 0000001D 256400                      dformat db "%d", 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;A natural number a (a: dword, defined in the data segment) is given. Read a natural number b from the keyboard and calculate: a + a/b. Display the result of this operation. The values will be displayed in d
    23 00000000 68[1A000000]                    push dword message_b
    24 00000005 FF15[00000000]                  call [printf]
    25 0000000B 83C404                          add esp, 4
    26                                          
    27 0000000E 68[04000000]                    push dword b
    28 00000013 68[1D000000]                    push dword dformat
    29 00000018 FF15[00000000]                  call [scanf]
    30 0000001E 83C408                          add esp, 4*2
    31                                          
    32 00000021 31C0                            xor eax, eax
    33 00000023 A1[00000000]                    mov eax, [a]
    34 00000028 99                              cdq
    35 00000029 8B1D[04000000]                  mov ebx, [b]
    36 0000002F F7FB                            idiv ebx
    37                                          
    38 00000031 0305[00000000]                  add eax, [a]
    39                                          
    40 00000037 50                              push eax
    41 00000038 68[08000000]                    push dword message
    42 0000003D FF15[00000000]                  call [printf]
    43 00000043 83C408                          add esp, 4*2
    44                                          
    45                                          ; exit(0)
    46 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
