     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    nmb dd 0
    15 00000004 FFC99A3B                    min dd 999999999
    16 00000008 256400                      dformat db "%d", 0
    17 0000000B 546865206D696E696D-         message_min db "The minimum is %d", 0
    17 00000014 756D20697320256400 
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;Read numbers (in base 10) in a loop until the digit '0' is read from the keyboard. Determine and display the smallest number from those that have been read.
    23                                          the_loop:
    24 00000000 68[00000000]                        push dword nmb
    25 00000005 68[08000000]                        push dword dformat
    26 0000000A FF15[00000000]                      call [scanf]
    27 00000010 83C408                              add esp, 8
    28                                              
    29 00000013 833D[00000000]00                    cmp dword [nmb], 0
    30 0000001A 7419                                jz fin
    31                                              
    32 0000001C A1[04000000]                        mov eax, [min]
    33 00000021 3905[00000000]                      cmp dword [nmb], eax
    34 00000027 7DD7                                jge the_loop
    35 00000029 A1[00000000]                        mov eax, [nmb]
    36 0000002E A3[04000000]                        mov [min], eax
    37 00000033 EBCB                                jmp the_loop
    38                                              
    39                                          fin:
    40 00000035 FF35[04000000]                      push dword [min]
    41 0000003B 68[0B000000]                        push dword message_min
    42 00000040 FF15[00000000]                      call [printf]
    43 00000046 83C408                              add esp, 8
    44                                          ; exit(0)
    45 00000049 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 0000004B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
