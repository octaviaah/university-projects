     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 <res 00000004>              a resw 2
    15 00000004 <res 00000004>              b resw 2
    16 00000008 00000000                    c dd 0
    17 0000000C 256400                      dformat db "%d", 0
    18 0000000F 257800                      xformat db "%x", 0
    19 00000012 613D00                      message_a db "a=", 0
    20 00000015 623D00                      message_b db "b=", 0
    21 00000018 633D257800                  message_c db "c=%x", 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;Read two words a and b in base 10 from the keyboard. Determine the doubleword c such that the low word of c is given by the sum of the a and b and the high word of c is given by the difference between a and
    27                                          ;a = 574, b = 136
    28                                          ;c = 01B602C6h
    29 00000000 68[12000000]                    push dword message_a
    30 00000005 FF15[00000000]                  call [printf]
    31 0000000B 83C404                          add esp, 4
    32                                          
    33 0000000E 68[00000000]                    push dword a
    34 00000013 68[0C000000]                    push dword dformat
    35 00000018 FF15[00000000]                  call [scanf]
    36 0000001E 83C408                          add esp, 8
    37                                          
    38 00000021 68[15000000]                    push dword message_b
    39 00000026 FF15[00000000]                  call [printf]
    40 0000002C 83C404                          add esp, 4
    41                                          
    42 0000002F 68[04000000]                    push dword b
    43 00000034 68[0C000000]                    push dword dformat
    44 00000039 FF15[00000000]                  call [scanf]
    45 0000003F 83C408                          add esp, 8
    46                                          
    47 00000042 31C0                            xor eax, eax
    48 00000044 66A1[00000000]                  mov ax, [a]
    49 0000004A 668B1D[04000000]                mov bx, [b]
    50 00000051 6601D8                          add ax, bx
    51 00000054 66A3[08000000]                  mov word [c], ax
    52                                          
    53 0000005A 31C0                            xor eax, eax
    54 0000005C 66A1[00000000]                  mov ax, [a]
    55 00000062 668B1D[04000000]                mov bx, [b]
    56 00000069 6629D8                          sub ax, bx
    57 0000006C 66A3[0A000000]                  mov word [c+2], ax
    58                                          
    59 00000072 FF35[08000000]                  push dword [c]
    60 00000078 68[18000000]                    push dword message_c
    61 0000007D FF15[00000000]                  call [printf]
    62 00000083 83C408                          add esp, 8
    63                                          ; exit(0)
    64 00000086 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000088 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
