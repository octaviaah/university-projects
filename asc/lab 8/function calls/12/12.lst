     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 247FFEFF                    a dd -98524
    14 00000004 61203D202564202862-         message db "a = %d (base 10), a = %x (base 16)"
    14 0000000D 617365203130292C20-
    14 00000016 61203D202578202862-
    14 0000001F 61736520313629     
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ;A negative number a (a: dword) is given. Display the value of that number in base 10 and in the base 16 in the following format: "a = <base_10> (base 10), a = <base_16> (base 16)"
    20 00000000 FF35[00000000]                  push dword [a]
    21 00000006 FF35[00000000]                  push dword [a]
    22 0000000C 68[04000000]                    push dword message
    23 00000011 FF15[00000000]                  call [printf]
    24 00000017 83C40C                          add esp, 4*3
    25                                          ; exit(0)
    26 0000001A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    27 0000001C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
