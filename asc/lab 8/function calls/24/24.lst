     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 06000000                    k dd 6
    17 0000000C 256400                      dformat db "%d", 0
    18 0000000F 613D00                      message_a db "a=", 0
    19 00000012 623D00                      message_b db "b=", 0
    20 00000015 726573756C743D2564-         message_fin db "result=%d", 0
    20 0000001E 00                 
    21 0000001F <res 00000008>              result resd 2
    22                                  
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ;Two numbers a and b are given. Compute the expression value: (a/b)*k, where k is a constant value defined in data segment. Display the expression value (in base 2).
    28 00000000 68[0F000000]                    push dword message_a
    29 00000005 FF15[00000000]                  call [printf]
    30 0000000B 83C404                          add esp, 4
    31                                          
    32 0000000E 68[00000000]                    push dword a
    33 00000013 68[0C000000]                    push dword dformat
    34 00000018 FF15[00000000]                  call [scanf]
    35 0000001E 83C408                          add esp, 8
    36                                          
    37 00000021 68[12000000]                    push dword message_b
    38 00000026 FF15[00000000]                  call [printf]
    39 0000002C 83C404                          add esp, 4
    40                                          
    41 0000002F 68[04000000]                    push dword b
    42 00000034 68[0C000000]                    push dword dformat
    43 00000039 FF15[00000000]                  call [scanf]
    44 0000003F 83C408                          add esp, 8
    45                                          
    46 00000042 31C0                            xor eax, eax
    47 00000044 A1[00000000]                    mov eax, [a]
    48 00000049 99                              cdq
    49                                          
    50 0000004A 31C9                            xor ecx, ecx
    51 0000004C 8B0D[04000000]                  mov ecx, [b]
    52 00000052 F7F9                            idiv ecx
    53                                          
    54 00000054 31DB                            xor ebx, ebx
    55 00000056 8B1D[08000000]                  mov ebx, [k]
    56 0000005C F7EB                            imul ebx
    57                                          
    58 0000005E A3[1F000000]                    mov dword [result], eax
    59 00000063 8915[23000000]                  mov dword [result+4], edx
    60                                          
    61 00000069 FF35[1F000000]                  push dword [result]
    62 0000006F 68[15000000]                    push dword message_fin
    63 00000074 FF15[00000000]                  call [printf]
    64 0000007A 83C408                          add esp, 8
    65                                          ; exit(0)
    66 0000007D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 0000007F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
