     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 616D736E68646B736C-         string db "amsnhdksltjfhnc*******jjak", 0
    14 00000009 746A66686E632A2A2A-
    14 00000012 2A2A2A2A6A6A616B00 
    15                                      len equ $-string
    16 0000001B 00                          chr db 0
    17 0000001C 256300                      cformat db "%c", 0
    18 0000001F 636861726163746572-         message_chr db "character=", 0
    18 00000028 3D00               
    19 0000002A 00000000                    occ dd 0
    20 0000002E 697420617070656172-         message_fin db "it appears %d times", 0
    20 00000037 732025642074696D65-
    20 00000040 7300               
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ;A character string is given (defined in the data segment). Read one character from the keyboard, then count the number of occurences of that character in the given string and display the character along wit
    26 00000000 68[1F000000]                    push dword message_chr
    27 00000005 FF15[00000000]                  call [printf]
    28 0000000B 83C404                          add esp, 4
    29                                          
    30 0000000E 68[1B000000]                    push dword chr
    31 00000013 68[1C000000]                    push dword cformat
    32 00000018 FF15[00000000]                  call [scanf]
    33 0000001E 83C408                          add esp, 8
    34                                          
    35 00000021 BE00000000                      mov esi, 0
    36 00000026 B91A000000                      mov ecx, len-1
    37                                          the_loop:
    38 0000002B 8A86[00000000]                      mov al, [string+esi]
    39 00000031 3A05[1B000000]                      cmp al, byte [chr]
    40 00000037 7507                                jnz cont
    41 00000039 8305[2A000000]01                    add dword [occ], 1
    42                                              cont:
    43 00000040 46                                      inc esi
    44 00000041 49                                      dec ecx
    45 00000042 75E7                                    jnz the_loop
    46                                                  
    47 00000044 FF35[2A000000]                  push dword [occ]
    48 0000004A 68[2E000000]                    push dword message_fin
    49 0000004F FF15[00000000]                  call [printf]
    50 00000055 83C408                          add esp, 8
    51                                          ; exit(0)
    52 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
