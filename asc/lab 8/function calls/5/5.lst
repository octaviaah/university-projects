     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 1AFFFFFF                    a dd -230
    14 00000004 0A000000                    b dd 10
    15 00000008 51756F7469656E7420-         message db "Quotient = %d, remainder = %d", 0
    15 00000011 3D2025642C2072656D-
    15 0000001A 61696E646572203D20-
    15 00000023 256400             
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ;Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate a/b and display the quotient and the remainder in the following format: "Quotient = <quotient>, remainder = <remai
    21                                          ;The values will be displayed in decimal format (base 10) with sign. ...
    22 00000000 31C0                            xor eax, eax
    23 00000002 31DB                            xor ebx, ebx
    24 00000004 A1[00000000]                    mov eax, [a]
    25 00000009 8B1D[04000000]                  mov ebx, [b]
    26 0000000F 99                              cdq
    27 00000010 F7FB                            idiv ebx
    28                                          
    29 00000012 52                              push edx
    30 00000013 50                              push eax
    31 00000014 68[08000000]                    push dword message
    32 00000019 FF15[00000000]                  call [printf]
    33 0000001F 83C40C                          add esp, 4*3
    34                                          ; exit(0)
    35 00000022 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 00000024 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
