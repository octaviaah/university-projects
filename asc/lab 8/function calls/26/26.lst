     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 06000000                    k dd 6
    17 0000000C 256400                      dformat db "%d", 0
    18 0000000F 613D00                      message_a db "a=", 0
    19 00000012 623D00                      message_b db "b=", 0
    20 00000015 726573756C743D2578-         message_fin db "result=%x", 0
    20 0000001E 00                 
    21 0000001F <res 00000008>              result resd 2
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ;Two numbers a and b are given. Compute the expression value: (a-b)*k, where k is a constant value defined in data segment. Display the expression value (in base 16).
    27 00000000 68[0F000000]                    push dword message_a
    28 00000005 FF15[00000000]                  call [printf]
    29 0000000B 83C404                          add esp, 4
    30                                          
    31 0000000E 68[00000000]                    push dword a
    32 00000013 68[0C000000]                    push dword dformat
    33 00000018 FF15[00000000]                  call [scanf]
    34 0000001E 83C408                          add esp, 8
    35                                          
    36 00000021 68[12000000]                    push dword message_b
    37 00000026 FF15[00000000]                  call [printf]
    38 0000002C 83C404                          add esp, 4
    39                                          
    40 0000002F 68[04000000]                    push dword b
    41 00000034 68[0C000000]                    push dword dformat
    42 00000039 FF15[00000000]                  call [scanf]
    43 0000003F 83C408                          add esp, 8
    44                                          
    45 00000042 31C0                            xor eax, eax
    46 00000044 A1[00000000]                    mov eax, [a]
    47 00000049 2B05[04000000]                  sub eax, [b]
    48                                          
    49 0000004F 31DB                            xor ebx, ebx
    50 00000051 8B1D[08000000]                  mov ebx, [k]
    51 00000057 F7EB                            imul ebx
    52                                          
    53 00000059 A3[1F000000]                    mov dword [result], eax
    54 0000005E 8915[23000000]                  mov dword [result+4], edx
    55                                          
    56 00000064 FF35[1F000000]                  push dword [result]
    57 0000006A 68[15000000]                    push dword message_fin
    58 0000006F FF15[00000000]                  call [printf]
    59 00000075 83C408                          add esp, 8
    60                                          ; exit(0)
    61 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
