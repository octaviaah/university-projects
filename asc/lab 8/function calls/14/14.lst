     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 257800                      xformat db "%x", 0
    17 0000000B 613D00                      message_a db "a=", 0
    18 0000000E 623D00                      message_b db "b=", 0
    19 00000011 612B623D256400              message_a_b db "a+b=%d", 0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ;Read two numbers a and b (in base 16) from the keyboard and calculate a+b. Display the result in base 10
    25 00000000 68[0B000000]                    push dword message_a
    26 00000005 FF15[00000000]                  call [printf]
    27 0000000B 83C404                          add esp, 4
    28                                          
    29 0000000E 68[00000000]                    push dword a
    30 00000013 68[08000000]                    push dword xformat
    31 00000018 FF15[00000000]                  call [scanf]
    32 0000001E 83C408                          add esp, 8
    33                                          
    34 00000021 68[0E000000]                    push dword message_b
    35 00000026 FF15[00000000]                  call [printf]
    36 0000002C 83C404                          add esp, 4
    37                                          
    38 0000002F 68[04000000]                    push dword b
    39 00000034 68[08000000]                    push dword xformat
    40 00000039 FF15[00000000]                  call [scanf]
    41 0000003F 83C408                          add esp, 8
    42                                          
    43 00000042 31C0                            xor eax, eax
    44 00000044 A1[00000000]                    mov eax, [a]
    45 00000049 0305[04000000]                  add eax, [b]
    46                                          
    47 0000004F 50                              push eax
    48 00000050 68[11000000]                    push dword message_a_b
    49 00000055 FF15[00000000]                  call [printf]
    50 0000005B 83C408                          add esp, 8
    51                                          ; exit(0)
    52 0000005E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 00000060 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
