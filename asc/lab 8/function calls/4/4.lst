     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00010000                    a dd 100h
    14 00000004 00010000                    b dd 100h
    15 00000008 <res 00000020>              result resd 8
    16 00000028 2564202A202564203D-         message db "%d * %d = %d"
    16 00000031 202564             
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate their product and display the result in the following format: "<a> * <b> = <result>". Example: "2 * 4 = 8"
    22                                          ;The values will be displayed in decimal format (base 10) with sign.
    23 00000000 31C0                            xor eax, eax
    24 00000002 31DB                            xor ebx, ebx
    25 00000004 A1[00000000]                    mov eax, [a]
    26 00000009 8B1D[04000000]                  mov ebx, [b]
    27 0000000F F7EB                            imul ebx
    28 00000011 A3[08000000]                    mov dword [result], eax
    29 00000016 8915[0C000000]                  mov dword [result+4], edx
    30                                          
    31 0000001C FF35[08000000]                  push dword [result]
    32 00000022 FF35[04000000]                  push dword [b]
    33 00000028 FF35[00000000]                  push dword [a]
    34 0000002E 68[28000000]                    push dword message
    35 00000033 FF15[00000000]                  call [printf]
    36 00000039 83C414                          add esp, 4*5
    37                                          ; exit(0)
    38 0000003C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 0000003E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
