     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4;
    14 00000001 2200                        b dw 34;
    15 00000003 2C000000                    c dd 44;
    16 00000007 3702000000000000            d dq 567;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;d-(a+b+c)-(a+a)
    22 00000000 A0[00000000]                    mov al, [a]; a in al
    23 00000005 6698                            cbw; al -> ax
    24 00000007 6699                            cwd; ax -> dx:ax
    25 00000009 660305[01000000]                add ax, [b]; a+b
    26 00000010 660305[03000000]                add ax, word [c]; add lower parts
    27 00000017 661315[05000000]                adc dx, word [c+2]; add upper parts -> a+b+c
    28 0000001E 0205[00000000]                  add al, [a];
    29 00000024 0205[00000000]                  add al, [a]; (a+b+c)-(a+a)
    30 0000002A 6652                            push dx;
    31 0000002C 6650                            push ax;
    32 0000002E 58                              pop eax; saves dx:ax in eax
    33 0000002F 99                              cdq; eax -> edx:eax
    34 00000030 8B1D[07000000]                  mov ebx, dword [d]; lower part of d in ebx
    35 00000036 8B0D[0B000000]                  mov ecx, dword [d+4]; upper part of d in ecx
    36 0000003C 29C3                            sub ebx, eax; sub the lower parts
    37 0000003E 19D1                            sbb ecx, edx; sub the upper parts -> d-(a+b+c)-(a+a)
    38                                          
    39                                          ;mov eax, dword [d]; lower part of d in eax
    40                                          ;mov edx, dword [d+4]; upper part of d in edx
    41                                          ;mov ecx, [c]; c in ecx
    42                                          ;mov ebx, 0;
    43                                          ;mov bx, [b]; b in bx, upper part of ebx is 0
    44                                          ;add ecx, ebx; c+b
    45                                          ;mov bh, 0; upper part of bh is 0
    46                                          ;mov bl, [a];  a in bl
    47                                          ;add ecx, ebx; c+b+a
    48                                          ;mov ebx, 0;
    49                                          ;sub eax, ecx; sub the lower parts
    50                                          ;sbb edx, ebx; sub the upper parts -> d-(a+b+c)
    51                                          ;mov ecx, 0;
    52                                          ;mov cl, [a]; a in cl
    53                                          ;add cl, [a]; a+a
    54                                          ;mov ebx, 0;
    55                                          ;sub eax, ecx; sub the lower parts
    56                                          ;sbb edx, ebx; sub the upper parts -> d-(a+b+c)-(a+a)
    57                                          
    58                                          
    59                                          ; exit(0)
    60 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
