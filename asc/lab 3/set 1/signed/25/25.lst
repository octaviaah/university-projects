     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 09                          a db 9;
    14 00000001 2200                        b dw 34;
    15 00000003 17000000                    c dd 23;
    16 00000007 4B00000000000000            d dq 75;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;(a + b - c) + (a + b + d) - (a + b)
    22 00000000 66A1[01000000]                  mov ax, [b]; b in ax
    23 00000006 0205[00000000]                  add al, [a]; a+b
    24 0000000C 6699                            cwd; ax->dx:ax
    25 0000000E 668B1D[03000000]                mov bx, word [c]; lower part of c in bx
    26 00000015 668B0D[05000000]                mov cx, word [c+2]; upper part of c in cx
    27 0000001C 6629D8                          sub ax, bx; sub the lower parts
    28 0000001F 6619CA                          sbb dx, cx; sub the upper parts -> a+b-c
    29 00000022 6652                            push dx;
    30 00000024 6650                            push ax;
    31 00000026 58                              pop eax; a+b-c in eax
    32 00000027 99                              cdq; eax->edx:eax
    33 00000028 89C3                            mov ebx, eax;
    34 0000002A 89D1                            mov ecx, edx; a+b-c in ecx:ebx
    35 0000002C 66A1[01000000]                  mov ax, [b]; b in ax
    36 00000032 0205[00000000]                  add al, [a]; a+b
    37 00000038 98                              cwde; ax->eax
    38 00000039 99                              cdq; eax->edx:eax
    39 0000003A 0305[07000000]                  add eax, dword [d]; add the lower parts
    40 00000040 1315[0B000000]                  adc edx, dword [d+4]; add the upper parts -> a+b+d
    41 00000046 01D8                            add eax, ebx; add the lower parts
    42 00000048 11CA                            adc edx, ecx; add the upper parts -> (a+b-c)+(a+b+d)
    43 0000004A 89C3                            mov ebx, eax;
    44 0000004C 89D1                            mov ecx, edx; (a+b-c)+(a+b+d) in ecx:ebx
    45 0000004E 66A1[01000000]                  mov ax, [b]; b in ax
    46 00000054 0205[00000000]                  add al, [a]; a+b
    47 0000005A 98                              cwde; ax->eax
    48 0000005B 99                              cdq; eax->edx:eax
    49 0000005C 29C3                            sub ebx, eax; sub the lower parts
    50 0000005E 19D1                            sbb ecx, edx; sub the upper parts -> (a+b-c)+(a+b+d)-(a+b)
    51                                      
    52                                          ; exit(0)
    53 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
