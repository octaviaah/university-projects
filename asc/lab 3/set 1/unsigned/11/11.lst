     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2;
    14 00000001 0C00                        b dw 12;
    15 00000003 E6000000                    c dd 230;
    16 00000007 E803000000000000            d dq 1000;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 A1[07000000]                    mov eax, dword [d]; lower part of d in eax
    22 00000005 8B15[0B000000]                  mov edx, dword [d+4]; upper part of d in edx
    23 0000000B 8B1D[03000000]                  mov ebx, [c]; c is in ebx
    24 00000011 B900000000                      mov ecx, 0; so we have qword-qword
    25 00000016 29D8                            sub eax, ebx; sub the lower parts
    26 00000018 19CA                            sbb edx, ecx; sub the upper parts
    27 0000001A BB00000000                      mov ebx, 0; convert to dword
    28 0000001F 8A1D[01000000]                  mov bl, byte [b]; lower part of b in bl
    29 00000025 8A3D[02000000]                  mov bh, byte [b+1]; upper part of b in bh
    30 0000002B 66B90000                        mov cx, 0; convert to word
    31 0000002F 8A0D[00000000]                  mov cl, [a]; a is in cl
    32 00000035 28CB                            sub bl, cl; sub the lower parts
    33 00000037 18EF                            sbb bh, ch; sub the upper parts
    34 00000039 01D8                            add eax, ebx;
    35 0000003B BB00000000                      mov ebx, 0;
    36 00000040 668B1D[01000000]                mov bx, [b];
    37 00000047 66031D[01000000]                add bx, [b];
    38 0000004E 66031D[01000000]                add bx, [b];
    39 00000055 29D8                            sub eax, ebx;
    40                                      
    41                                          ; exit(0)
    42 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
