     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2;
    14 00000001 0500                        b dw 5;
    15 00000003 19000000                    c dd 25;
    16 00000007 4A00000000000000            d dq 74;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;(a+d+d)-c+(b+b)
    22 00000000 A1[07000000]                    mov eax, dword [d]; the lower part of d in eax
    23 00000005 8B15[0B000000]                  mov edx, dword [d+4]; the upper part of d in edx
    24 0000000B 01C0                            add eax, eax; add the lower parts
    25 0000000D 11D2                            adc edx, edx; add the upper parts -> d+data
    26 0000000F 0205[00000000]                  add al, [a]; d+d+ad
    27 00000015 2B05[03000000]                  sub eax, [c]; (a+d+d)-c
    28 0000001B 668B1D[01000000]                mov bx, [b];
    29 00000022 66031D[01000000]                add bx, [b]; b+b
    30 00000029 6601D8                          add ax, bx; (a+d+d)-c+(b+b)
    31                                          
    32                                          ; exit(0)
    33 0000002C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 0000002E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
