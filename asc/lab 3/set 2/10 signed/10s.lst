     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 06                          a db 6;
    14 00000001 0D00                        b dw 13;
    15 00000003 07                          c db 7;
    16 00000004 19000000                    d dd 25;
    17 00000008 C800000000000000            x dq 200;
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;d-(7-a*b+c)/a-6+x/2
    22 00000000 A0[00000000]                    mov al, [a]; a in al;
    23 00000005 6698                            cbw; al->ax
    24 00000007 66F72D[01000000]                imul word [b]; ax*[b]=dx:ax -> a*b
    25 0000000E 6689C3                          mov bx, ax;
    26 00000011 6689D1                          mov cx, dx; a*b in cx:bx
    27 00000014 B007                            mov al, 7; 7 in al
    28 00000016 6698                            cbw; al->ax
    29 00000018 6699                            cwd; ax->dx:ax
    30 0000001A 6629D8                          sub ax, bx; sub the lower parts
    31 0000001D 6619CA                          sbb dx, cx; sub the upper parts -> 7-a*b
    32 00000020 0205[03000000]                  add al, [c]; 7-a*b+c
    33 00000026 6689C3                          mov bx, ax;
    34 00000029 6689D1                          mov cx, dx; 7-a*b+c in cx:bx
    35 0000002C A0[00000000]                    mov al, [a]; a in al
    36 00000031 6698                            cbw; al->ax
    37 00000033 6650                            push ax;
    38 00000035 6689D8                          mov ax, bx;
    39 00000038 6689CA                          mov dx, cx; 7-a*b+c in dx:ax
    40 0000003B 665B                            pop bx; a in bx now
    41 0000003D 66F7FB                          idiv bx; dx:ax/bx = quotient in ax, remainder in dx -> (7-a*b+c)/a
    42 00000040 6699                            cwd; ax->dx:ax
    43 00000042 668B1D[04000000]                mov bx, word [d]; lower part of d in bx
    44 00000049 668B0D[06000000]                mov cx, word [d+2]; upper part of d in cx
    45 00000050 6629C3                          sub bx, ax; sub the lower parts
    46 00000053 6619D1                          sbb cx, dx; sub the upper parts -> d-(7-a*b+c)/a in cx:bx
    47 00000056 B206                            mov dl, 6; 6 in dl;
    48 00000058 28D3                            sub bl, dl; d-(7-a*b+c)/a-6
    49 0000005A 6651                            push cx;
    50 0000005C 6653                            push bx;
    51 0000005E 8B1D[08000000]                  mov ebx, dword [x]; lower part of x in ebx
    52 00000064 8B0D[0C000000]                  mov ecx, dword [x+4]; upper part of x in ecx
    53 0000006A 66B80200                        mov ax, 2; 2 in ax;
    54 0000006E 98                              cwde; ax->eax
    55 0000006F 89C2                            mov edx, eax; 2 in edx
    56 00000071 89D8                            mov eax, ebx; lower part of x in eax
    57 00000073 89D3                            mov ebx, edx; 2 in ebx
    58 00000075 89CA                            mov edx, ecx; upper part of x in edx
    59 00000077 F7FB                            idiv ebx; edx:eax/ebx = quotient in eax, remainder in edx -> x/2
    60 00000079 5B                              pop ebx; d-(7-a*b+c)/a-6
    61 0000007A 01D8                            add eax, ebx; d-(7-a*b+c)/a-6+x/2
    62                                      
    63                                          ; exit(0)
    64 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
