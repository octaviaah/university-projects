     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0E00                        a dw 14;
    14 00000002 04                          b db 4;
    15 00000003 1900                        c dw 25;
    16 00000005 1C000000                    d dd 28;
    17 00000009 2000000000000000            x dq 32;
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                      ;(a*a+b/c-1)/(b+c)+d-x; a-word; b-byte; c-word; d-doubleword; x-qword
    23 00000000 66A1[00000000]                  mov ax, [a]; a in ax
    24 00000006 66F72D[00000000]                imul word [a]; a*a in dx:ax
    25 0000000D 6689D1                          mov cx, dx;
    26 00000010 6689C3                          mov bx, ax; a*a in cx:bx
    27 00000013 A0[02000000]                    mov al, [b]; b in al
    28 00000018 6698                            cbw; al->ax
    29 0000001A 6699                            cwd; ax->dx:ax
    30 0000001C 66F73D[03000000]                idiv word [c]; quotient of b/c in ax, remainder in dx
    31 00000023 6601C3                          add bx, ax; a*a+b/c
    32 00000026 B201                            mov dl, 1;
    33 00000028 28D3                            sub bl, dl; a*a+b/c-1
    34 0000002A 6689D8                          mov ax, bx; lower part of a*a+b/c-1 in ax
    35 0000002D 6689CA                          mov dx, cx; upper part of a*a+b/c-1 in dx
    36 00000030 668B0D[03000000]                mov cx, [c]; c is in cx
    37 00000037 020D[02000000]                  add cl, [b]; c+b
    38 0000003D 66F7F9                          idiv cx; quotient of (a*a+b/c-1)/(b+c) in ax, remainder in dx
    39 00000040 98                              cwde; ax->eax
    40 00000041 0305[05000000]                  add eax, [d]; (a*a+b/c-1)/(b+c)+d
    41 00000047 99                              cdq; eax->edx:eax
    42 00000048 8B1D[09000000]                  mov ebx, dword[x]; lower part of x in ebx
    43 0000004E 8B0D[0D000000]                  mov ecx, dword[x+4]; upper part of x in ecx
    44 00000054 29D8                            sub eax, ebx; sub the lower parts
    45 00000056 19CA                            sbb edx, ecx; sub the upper parts -> (a*a+b/c-1)/(b+c)+d-x
    46                                          
    47                                          ; exit(0)
    48 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
