     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 1900                        a dw 25;
    14 00000002 09                          b db 9;
    15 00000003 54000000                    c dd 84;
    16 00000007 6400000000000000            x dq 100;
    17                                      
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;(a*a+b+x)/(b+b)+c*c
    22 00000000 66A1[00000000]                  mov ax, [a]; a in ax
    23 00000006 66F7E8                          imul ax; ax*ax=dx:ax -> a*a
    24 00000009 0205[02000000]                  add al, [b]; a*a+b
    25 0000000F 6652                            push dx;
    26 00000011 6650                            push ax;
    27 00000013 58                              pop eax;
    28 00000014 99                              cdq; eax->edx:eax
    29 00000015 8B1D[07000000]                  mov ebx, dword [x]; lower part of x in ebx
    30 0000001B 8B0D[0B000000]                  mov ecx, dword [x+4]; upper part of x in ecx
    31 00000021 01D8                            add eax, ebx; add the lower parts
    32 00000023 11CA                            adc edx, ecx; add the upper parts -> a*a+b+x
    33 00000025 89C3                            mov ebx, eax;
    34 00000027 89D1                            mov ecx, edx; a*a+b+x in ecx:ebx
    35 00000029 A0[02000000]                    mov al, [b]; b in al
    36 0000002E 00C0                            add al, al; b+b
    37 00000030 6698                            cbw; al->ax
    38 00000032 98                              cwde; ax->eax
    39 00000033 89C2                            mov edx, eax; b*b in edx
    40 00000035 89D8                            mov eax, ebx; lower part of a*a+b+x in eax
    41 00000037 89D3                            mov ebx, edx; b*b in ebx
    42 00000039 89CA                            mov edx, ecx; upper part of a*a+b+x in edx
    43 0000003B F7FB                            idiv ebx; edx:eax/ebx = quotient in eax, remainder in edx ->  (a*a+b+x)/(b+b)
    44 0000003D 89C3                            mov ebx, eax;
    45 0000003F A1[03000000]                    mov eax, [c]; c in eax
    46 00000044 F7E8                            imul eax; eax*eax=edx:eax -> c*c
    47 00000046 89C1                            mov ecx, eax; lower part of c*c in ecx
    48 00000048 89D8                            mov eax, ebx; (a*a+b+x)/(b+b) in eax
    49 0000004A 89D3                            mov ebx, edx; upper part of c*c in ebx
    50 0000004C 99                              cdq; eax->edx:eax
    51 0000004D 01C8                            add eax, ecx; add the lower parts
    52 0000004F 11DA                            adc edx, ebx; add the upper parts -> (a*a+b+x)/(b+b)+c*c
    53                                          ; exit(0)
    54 00000051 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000053 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
