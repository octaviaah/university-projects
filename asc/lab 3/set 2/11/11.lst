     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 80000000                    a dd 128;
    14 00000004 02                          b db 2;
    15 00000005 03                          c db 3;
    16 00000006 0E00000000000000            x dq 14;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                      ;(a+b)/(2-b*b+b/c)-x; a-doubleword; b,c-byte; x-qword
    22 00000000 A0[04000000]                    mov al, [b]; b is in al
    23 00000005 6698                            cbw; al->ax
    24 00000007 F63D[05000000]                  idiv byte [c]; quotient of b/c is in al, remainder is in ah
    25 0000000D 88C3                            mov bl, al; b/c from al to bl
    26 0000000F A0[04000000]                    mov al, [b]; b is in al
    27 00000014 6698                            cbw; al->ax
    28 00000016 F62D[04000000]                  imul byte [b]; b*b in ax
    29 0000001C 6689C1                          mov cx, ax; b*b from ax to cx
    30 0000001F 66B80200                        mov ax, 2;
    31 00000023 6629C8                          sub ax, cx; 2-b*b
    32 00000026 00D8                            add al, bl; 2-b*b+b/c
    33 00000028 6689C3                          mov bx, ax; ax is in bx -> 2-b*b+b/c
    34 0000002B 66A1[00000000]                  mov ax, word [a]; lower part of a in ax
    35 00000031 668B15[02000000]                mov dx, word [a+2]; upper part of a in dx
    36 00000038 0205[04000000]                  add al, [b]; a+b
    37 0000003E 66F7FB                          idiv bx; quotient of (a+b)/(2-b*b+b/c) is in ax, remainder in dx
    38 00000041 98                              cwde; ax->eax
    39 00000042 99                              cdq; eax->edx:eax
    40 00000043 8B1D[06000000]                  mov ebx, dword [x]; lower part of x in ebx
    41 00000049 8B0D[0A000000]                  mov ecx, dword [x+4]; upper part of x in ecx
    42 0000004F 29D8                            sub eax, ebx; sub the lower parts
    43 00000051 19CA                            sbb edx, ecx; sub the upper parts -> (a+b)/(2-b*b+b/c)-x
    44                                          ; exit(0)
    45 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
